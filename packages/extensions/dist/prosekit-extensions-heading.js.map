{"version":3,"file":"prosekit-extensions-heading.js","names":["backspaceUnsetHeading: Command"],"sources":["../src/heading/heading-commands.ts","../src/heading/heading-input-rule.ts","../src/heading/heading-keymap.ts","../src/heading/heading-spec.ts","../src/heading/heading.ts"],"sourcesContent":["import {\n  defineCommands,\n  insertNode,\n  setBlockType,\n  toggleNode,\n  type Extension,\n} from '@prosekit/core'\n\nimport type { HeadingAttrs } from './heading-types'\n\n/**\n * @internal\n */\nexport type HeadingCommandsExtension = Extension<{\n  Commands: {\n    setHeading: [attrs?: HeadingAttrs | undefined]\n    insertHeading: [attrs?: HeadingAttrs | undefined]\n    toggleHeading: [attrs?: HeadingAttrs | undefined]\n  }\n}>\n\n/**\n * @internal\n */\nexport function defineHeadingCommands(): HeadingCommandsExtension {\n  return defineCommands({\n    setHeading: (attrs?: HeadingAttrs) => {\n      return setBlockType({ type: 'heading', attrs })\n    },\n    insertHeading: (attrs?: HeadingAttrs) => {\n      return insertNode({ type: 'heading', attrs })\n    },\n    toggleHeading: (attrs?: HeadingAttrs) => {\n      return toggleNode({ type: 'heading', attrs })\n    },\n  })\n}\n","import type { PlainExtension } from '@prosekit/core'\n\nimport { defineTextBlockInputRule } from '../input-rule'\n\nimport type { HeadingAttrs } from './heading-types'\n\n/**\n * Converts the text block to a heading when `#` is typed at the start of a new\n * line followed by a space.\n *\n * @internal\n */\nexport function defineHeadingInputRule(): PlainExtension {\n  return defineTextBlockInputRule({\n    regex: /^(#{1,6})\\s$/,\n    type: 'heading',\n    attrs: (match) => {\n      const level: number = match[1]?.length ?? 1\n      return { level } satisfies HeadingAttrs\n    },\n  })\n}\n","import {\n  defineKeymap,\n  isAtBlockStart,\n  toggleNode,\n  unsetBlockType,\n  withSkipCodeBlock,\n  type PlainExtension,\n} from '@prosekit/core'\nimport type { Command } from '@prosekit/pm/state'\n\nfunction toggleHeadingKeybinding(level: number): Command {\n  return withSkipCodeBlock(toggleNode({ type: 'heading', attrs: { level } }))\n}\n\n/**\n * Set the block type to default (usually `paragraph`) when pressing Backspace at\n * the start of a heading block.\n */\nconst backspaceUnsetHeading: Command = (state, dispatch, view) => {\n  const $pos = isAtBlockStart(state, view)\n  if ($pos?.parent.type.name === 'heading') {\n    return unsetBlockType()(state, dispatch, view)\n  }\n  return false\n}\n\n/**\n * @internal\n */\nexport function defineHeadingKeymap(): PlainExtension {\n  return defineKeymap({\n    'mod-alt-1': toggleHeadingKeybinding(1),\n    'mod-alt-2': toggleHeadingKeybinding(2),\n    'mod-alt-3': toggleHeadingKeybinding(3),\n    'mod-alt-4': toggleHeadingKeybinding(4),\n    'mod-alt-5': toggleHeadingKeybinding(5),\n    'mod-alt-6': toggleHeadingKeybinding(6),\n    'Backspace': backspaceUnsetHeading,\n  })\n}\n","import {\n  defineNodeSpec,\n  type Extension,\n} from '@prosekit/core'\n\nimport type { HeadingAttrs } from './heading-types'\n\n/**\n * @internal\n */\nexport type HeadingSpecExtension = Extension<{\n  Nodes: {\n    heading: HeadingAttrs\n  }\n}>\n\n/**\n * @internal\n */\nexport function defineHeadingSpec(): HeadingSpecExtension {\n  return defineNodeSpec({\n    name: 'heading',\n    attrs: { level: { default: 1, validate: 'number' } },\n    content: 'inline*',\n    group: 'block',\n    defining: true,\n    parseDOM: [\n      { tag: 'h1', attrs: { level: 1 } },\n      { tag: 'h2', attrs: { level: 2 } },\n      { tag: 'h3', attrs: { level: 3 } },\n      { tag: 'h4', attrs: { level: 4 } },\n      { tag: 'h5', attrs: { level: 5 } },\n      { tag: 'h6', attrs: { level: 6 } },\n    ],\n    toDOM(node) {\n      return [`h${node.attrs.level}`, 0]\n    },\n  })\n}\n","import {\n  union,\n  type Union,\n} from '@prosekit/core'\n\nimport {\n  defineHeadingCommands,\n  type HeadingCommandsExtension,\n} from './heading-commands'\nimport { defineHeadingInputRule } from './heading-input-rule'\nimport { defineHeadingKeymap } from './heading-keymap'\nimport {\n  defineHeadingSpec,\n  type HeadingSpecExtension,\n} from './heading-spec'\n\n/**\n * @internal\n */\nexport type HeadingExtension = Union<\n  [HeadingSpecExtension, HeadingCommandsExtension]\n>\n\n/**\n * @public\n */\nexport function defineHeading(): HeadingExtension {\n  return union(\n    defineHeadingSpec(),\n    defineHeadingInputRule(),\n    defineHeadingKeymap(),\n    defineHeadingCommands(),\n  )\n}\n"],"mappings":";;;;;;;AAwBA,SAAgB,wBAAkD;AAChE,QAAO,eAAe;EACpB,aAAa,UAAyB;AACpC,UAAO,aAAa;IAAE,MAAM;IAAW;IAAO,CAAC;;EAEjD,gBAAgB,UAAyB;AACvC,UAAO,WAAW;IAAE,MAAM;IAAW;IAAO,CAAC;;EAE/C,gBAAgB,UAAyB;AACvC,UAAO,WAAW;IAAE,MAAM;IAAW;IAAO,CAAC;;EAEhD,CAAC;;;;;;;;;;;ACvBJ,SAAgB,yBAAyC;AACvD,QAAO,yBAAyB;EAC9B,OAAO;EACP,MAAM;EACN,QAAQ,UAAU;AAEhB,UAAO,EAAE,OADa,MAAM,IAAI,UAAU,GAC1B;;EAEnB,CAAC;;;;;ACVJ,SAAS,wBAAwB,OAAwB;AACvD,QAAO,kBAAkB,WAAW;EAAE,MAAM;EAAW,OAAO,EAAE,OAAO;EAAE,CAAC,CAAC;;;;;;AAO7E,MAAMA,yBAAkC,OAAO,UAAU,SAAS;AAEhE,KADa,eAAe,OAAO,KAAK,EAC9B,OAAO,KAAK,SAAS,UAC7B,QAAO,gBAAgB,CAAC,OAAO,UAAU,KAAK;AAEhD,QAAO;;;;;AAMT,SAAgB,sBAAsC;AACpD,QAAO,aAAa;EAClB,aAAa,wBAAwB,EAAE;EACvC,aAAa,wBAAwB,EAAE;EACvC,aAAa,wBAAwB,EAAE;EACvC,aAAa,wBAAwB,EAAE;EACvC,aAAa,wBAAwB,EAAE;EACvC,aAAa,wBAAwB,EAAE;EACvC,aAAa;EACd,CAAC;;;;;;;;ACnBJ,SAAgB,oBAA0C;AACxD,QAAO,eAAe;EACpB,MAAM;EACN,OAAO,EAAE,OAAO;GAAE,SAAS;GAAG,UAAU;GAAU,EAAE;EACpD,SAAS;EACT,OAAO;EACP,UAAU;EACV,UAAU;GACR;IAAE,KAAK;IAAM,OAAO,EAAE,OAAO,GAAG;IAAE;GAClC;IAAE,KAAK;IAAM,OAAO,EAAE,OAAO,GAAG;IAAE;GAClC;IAAE,KAAK;IAAM,OAAO,EAAE,OAAO,GAAG;IAAE;GAClC;IAAE,KAAK;IAAM,OAAO,EAAE,OAAO,GAAG;IAAE;GAClC;IAAE,KAAK;IAAM,OAAO,EAAE,OAAO,GAAG;IAAE;GAClC;IAAE,KAAK;IAAM,OAAO,EAAE,OAAO,GAAG;IAAE;GACnC;EACD,MAAM,MAAM;AACV,UAAO,CAAC,IAAI,KAAK,MAAM,SAAS,EAAE;;EAErC,CAAC;;;;;;;;ACXJ,SAAgB,gBAAkC;AAChD,QAAO,MACL,mBAAmB,EACnB,wBAAwB,EACxB,qBAAqB,EACrB,uBAAuB,CACxB"}