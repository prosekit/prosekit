---
import { exampleMeta } from '../../../../example.meta'
import MultipleFrameworksDemo from './multiple-frameworks-demo.svelte'

import LitStory from '../../../stories/lit.astro'
import PreactStory from '../../../stories/preact.astro'
import ReactStory from '../../../stories/react.astro'
import SolidStory from '../../../stories/solid.astro'
import SvelteStory from '../../../stories/svelte.astro'
import VanillaStory from '../../../stories/vanilla.astro'
import VueStory from '../../../stories/vue.astro'
import DemoCodeGroup from './demo-code-group.astro'

interface Props {
  story: string
  showCode?: boolean
}

const { story, showCode }: Props = Astro.props

const examples = exampleMeta.examples.filter((example) => example.story === story)

if (examples.length === 0) {
  throw new Error(`Unable to find examples for story ${story}`)
}

const frameworks = examples.map((example) => example.framework)

const frameworkToExample = examples.reduce((acc, example) => {
  acc[example.framework] = example
  return acc
}, {} as Record<string, typeof examples[number]>)
---

<MultipleFrameworksDemo frameworks={frameworks} story={story} showCode={showCode} client:load>
  {frameworks.includes('lit') && <Fragment slot="slot-story-lit"><LitStory story={story} /></Fragment>}
  {frameworks.includes('preact') && <Fragment slot="slot-story-preact"><PreactStory story={story} /></Fragment>}
  {frameworks.includes('react') && <Fragment slot="slot-story-react"><ReactStory story={story} /></Fragment>}
  {frameworks.includes('solid') && <Fragment slot="slot-story-solid"><SolidStory story={story} /></Fragment>}
  {frameworks.includes('svelte') && <Fragment slot="slot-story-svelte"><SvelteStory story={story} /></Fragment>}
  {frameworks.includes('vanilla') && <Fragment slot="slot-story-vanilla"><VanillaStory story={story} /></Fragment>}
  {frameworks.includes('vue') && <Fragment slot="slot-story-vue"><VueStory story={story} /></Fragment>}

  {frameworks.includes('lit') && <Fragment slot="slot-code-lit"><DemoCodeGroup example={frameworkToExample['lit']} /></Fragment>}
  {frameworks.includes('preact') && <Fragment slot="slot-code-preact"><DemoCodeGroup example={frameworkToExample['preact']} /></Fragment>}
  {frameworks.includes('react') && <Fragment slot="slot-code-react"><DemoCodeGroup example={frameworkToExample['react']} /></Fragment>}
  {frameworks.includes('solid') && <Fragment slot="slot-code-solid"><DemoCodeGroup example={frameworkToExample['solid']} /></Fragment>}
  {frameworks.includes('svelte') && <Fragment slot="slot-code-svelte"><DemoCodeGroup example={frameworkToExample['svelte']} /></Fragment>}
  {frameworks.includes('vanilla') && <Fragment slot="slot-code-vanilla"><DemoCodeGroup example={frameworkToExample['vanilla']} /></Fragment>}
  {frameworks.includes('vue') && <Fragment slot="slot-code-vue"><DemoCodeGroup example={frameworkToExample['vue']} /></Fragment>}
</MultipleFrameworksDemo>
