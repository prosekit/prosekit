{"version":3,"file":"prosekit-web-drop-indicator.js","names":["width: number","height: number","top: number","left: number","dropIndicatorProps: PropDeclarations<DropIndicatorProps>","dropIndicatorEvents: EventDeclarations<DropIndicatorEvents>","DropIndicatorElementBase: BaseElementConstructor<DropIndicatorProps>"],"sources":["../src/components/drop-indicator/drop-indicator/setup.ts","../src/components/drop-indicator/drop-indicator/types.ts","../src/components/drop-indicator/drop-indicator/element.gen.ts"],"sourcesContent":["import {\n  createComputed,\n  createSignal,\n  useEffect,\n  type ConnectableElement,\n  type SetupOptions,\n} from '@aria-ui/core'\nimport { usePresence } from '@aria-ui/presence'\nimport {\n  defineDropIndicator,\n  type ShowHandlerOptions,\n} from '@prosekit/extensions/drop-indicator'\n\nimport { useEditorExtension } from '../../../hooks/use-editor-extension'\nimport { useScrolling } from '../../../hooks/use-scrolling'\nimport { assignStyles } from '../../../utils/assign-styles'\n\nimport type {\n  DropIndicatorEvents,\n  DropIndicatorProps,\n} from './types'\n\n/**\n * @internal\n */\nexport function useDropIndicator(\n  host: ConnectableElement,\n  { state }: SetupOptions<DropIndicatorProps, DropIndicatorEvents>,\n): void {\n  type DropIndicatorContext = ShowHandlerOptions | null\n  const context = createSignal<DropIndicatorContext>(null)\n\n  const extension = defineDropIndicator({\n    onShow: (options) => context.set(options),\n    onHide: () => context.set(null),\n  })\n\n  useEditorExtension(host, state.editor, extension)\n\n  const line = createComputed(() => context.get()?.line)\n  const scrolling = useScrolling(host)\n  const presence = createComputed(() => {\n    return !!context.get() && !scrolling.get()\n  })\n  usePresence(host, presence)\n\n  useEffect(\n    host,\n    () => {\n      const lineValue = line.get()\n      const lineWidth = state.width.get()\n\n      if (!lineValue) return\n\n      const { p1: { x: x1, y: y1 }, p2: { x: x2, y: y2 } } = lineValue\n      const horizontal = y1 === y2\n\n      let width: number\n      let height: number\n      let top: number = y1\n      let left: number = x1\n\n      if (horizontal) {\n        width = x2 - x1\n        height = lineWidth\n        top -= lineWidth / 2\n      } else {\n        width = lineWidth\n        height = y2 - y1\n        left -= lineWidth / 2\n      }\n\n      top = Math.round(top)\n      left = Math.round(left)\n\n      assignStyles(host, {\n        position: 'fixed',\n        pointerEvents: 'none',\n        width: `${width}px`,\n        height: `${height}px`,\n        transform: `translate(${left}px, ${top}px)`,\n        left: '0px',\n        top: '0px',\n      })\n    },\n  )\n}\n","import type {\n  EventDeclarations,\n  PropDeclarations,\n} from '@aria-ui/core'\nimport type { Editor } from '@prosekit/core'\n\nexport interface DropIndicatorProps {\n  /**\n   * The ProseKit editor instance.\n   *\n   * @default null\n   * @hidden\n   */\n  editor: Editor | null\n\n  /**\n   * The line width in pixels.\n   *\n   * @default 2\n   */\n  width: number\n}\n\n/** @internal */\nexport const dropIndicatorProps: PropDeclarations<DropIndicatorProps> = Object.freeze({\n  editor: { default: null },\n  width: { default: 2 },\n})\n\nexport interface DropIndicatorEvents {\n}\n\n/** @internal */\nexport const dropIndicatorEvents: EventDeclarations<DropIndicatorEvents> = {}\n","import { defineCustomElement, registerCustomElement, type BaseElementConstructor } from \"@aria-ui/core\"\n\nimport { useDropIndicator } from \"./setup\"\nimport { dropIndicatorEvents, dropIndicatorProps, type DropIndicatorEvents, type DropIndicatorProps } from \"./types\"\n\nconst DropIndicatorElementBase: BaseElementConstructor<DropIndicatorProps> = defineCustomElement<\n  DropIndicatorProps,\n  DropIndicatorEvents\n>({\n  props: dropIndicatorProps,\n  events: dropIndicatorEvents,\n  setup: useDropIndicator,\n})\nclass DropIndicatorElement extends DropIndicatorElementBase {}\n\nregisterCustomElement('prosekit-drop-indicator', DropIndicatorElement)\n  \nexport { DropIndicatorElement }\n"],"mappings":";;;;;;;;;;AAyBA,SAAgB,iBACd,MACA,EAAE,SACI;CAEN,MAAM,UAAU,aAAmC,KAAK;CAExD,MAAM,YAAY,oBAAoB;EACpC,SAAS,YAAY,QAAQ,IAAI,QAAQ;EACzC,cAAc,QAAQ,IAAI,KAAK;EAChC,CAAC;AAEF,oBAAmB,MAAM,MAAM,QAAQ,UAAU;CAEjD,MAAM,OAAO,qBAAqB,QAAQ,KAAK,EAAE,KAAK;CACtD,MAAM,YAAY,aAAa,KAAK;CACpC,MAAM,WAAW,qBAAqB;AACpC,SAAO,CAAC,CAAC,QAAQ,KAAK,IAAI,CAAC,UAAU,KAAK;GAC1C;AACF,aAAY,MAAM,SAAS;AAE3B,WACE,YACM;EACJ,MAAM,YAAY,KAAK,KAAK;EAC5B,MAAM,YAAY,MAAM,MAAM,KAAK;AAEnC,MAAI,CAAC,UAAW;EAEhB,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,GAAG,MAAM,IAAI,EAAE,GAAG,IAAI,GAAG,SAAS;EACvD,MAAM,aAAa,OAAO;EAE1B,IAAIA;EACJ,IAAIC;EACJ,IAAIC,MAAc;EAClB,IAAIC,OAAe;AAEnB,MAAI,YAAY;AACd,WAAQ,KAAK;AACb,YAAS;AACT,UAAO,YAAY;SACd;AACL,WAAQ;AACR,YAAS,KAAK;AACd,WAAQ,YAAY;;AAGtB,QAAM,KAAK,MAAM,IAAI;AACrB,SAAO,KAAK,MAAM,KAAK;AAEvB,eAAa,MAAM;GACjB,UAAU;GACV,eAAe;GACf,OAAO,GAAG,MAAM;GAChB,QAAQ,GAAG,OAAO;GAClB,WAAW,aAAa,KAAK,MAAM,IAAI;GACvC,MAAM;GACN,KAAK;GACN,CAAC;GAEL;;;;;;AC7DH,MAAaC,qBAA2D,OAAO,OAAO;CACpF,QAAQ,EAAE,SAAS,MAAM;CACzB,OAAO,EAAE,SAAS,GAAG;CACtB,CAAC;;AAMF,MAAaC,sBAA8D,EAAE;;;;AC5B7E,MAAMC,2BAAuE,oBAG3E;CACA,OAAO;CACP,QAAQ;CACR,OAAO;CACR,CAAC;AACF,IAAM,uBAAN,cAAmC,yBAAyB;AAE5D,sBAAsB,2BAA2B,qBAAqB"}