{"version":3,"file":"create-component-C3NIgDxm.js","names":["eventHandlers: Record<string, (event: Event) => void>","properties: Record<string, unknown>"],"sources":["../src/components/create-component.ts"],"sourcesContent":["import {\n  defineComponent,\n  h,\n  onMounted,\n  ref,\n  watchEffect,\n  type DefineSetupFnComponent,\n  type EmitsOptions,\n  type HTMLAttributes,\n} from 'vue'\n\nimport { useEditorContext } from '../injection/editor-context'\n\nexport function createComponent<\n  Props extends { [PropName in keyof Props]: unknown },\n  Emits extends EmitsOptions,\n>(\n  tagName: string,\n  displayName: string,\n  propNames: string[],\n  eventNames: string[],\n): DefineSetupFnComponent<Partial<Props> & HTMLAttributes, Emits> {\n  const hasEditor = propNames.includes('editor')\n\n  const Component = defineComponent<any, any>(\n    (props: Record<string, unknown>, { slots, emit }) => {\n      const editor = useEditorContext()\n\n      const mounted = ref(false)\n\n      onMounted(() => {\n        mounted.value = true\n      })\n\n      const elementRef = ref<HTMLElement | null>(null)\n\n      watchEffect((onCleanup) => {\n        const element = elementRef.value\n        if (!element) return\n\n        const eventHandlers: Record<string, (event: Event) => void> = {}\n        for (const eventName of eventNames) {\n          const extractDetail = eventName.endsWith('Change')\n          eventHandlers[eventName] = (event: Event) => {\n            emit(\n              eventName,\n              extractDetail ? (event as CustomEvent).detail : event,\n            )\n          }\n        }\n\n        for (const [eventName, handler] of Object.entries(eventHandlers)) {\n          element.addEventListener(eventName, handler)\n        }\n\n        onCleanup(() => {\n          for (const [eventName, handler] of Object.entries(eventHandlers)) {\n            element.removeEventListener(eventName, handler)\n          }\n        })\n      })\n\n      return () => {\n        const properties: Record<string, unknown> = {}\n\n        for (const [key, value] of Object.entries(props)) {\n          if (value !== undefined && !key.startsWith('.')) {\n            properties[propNames.includes(key) ? '.' + key : key] = value\n          }\n        }\n\n        // Try to add the editor prop if it's missing.\n        if (hasEditor && editor && !properties['editor']) {\n          properties.editor = editor\n        }\n\n        // Ensure web components work after SSR hydration.\n        properties.key = mounted.value ? 1 : 0\n\n        properties.ref = elementRef\n\n        return h(tagName, properties, slots.default?.())\n      }\n    },\n    {\n      name: displayName,\n      props: propNames,\n      emits: eventNames,\n    },\n  )\n\n  return Component\n}\n"],"mappings":";;;;AAaA,SAAgB,gBAId,SACA,aACA,WACA,YACgE;CAChE,MAAM,YAAY,UAAU,SAAS,SAAS;AAqE9C,QAnEkB,iBACf,OAAgC,EAAE,OAAO,WAAW;EACnD,MAAM,SAAS,kBAAkB;EAEjC,MAAM,UAAU,IAAI,MAAM;AAE1B,kBAAgB;AACd,WAAQ,QAAQ;IAChB;EAEF,MAAM,aAAa,IAAwB,KAAK;AAEhD,eAAa,cAAc;GACzB,MAAM,UAAU,WAAW;AAC3B,OAAI,CAAC,QAAS;GAEd,MAAMA,gBAAwD,EAAE;AAChE,QAAK,MAAM,aAAa,YAAY;IAClC,MAAM,gBAAgB,UAAU,SAAS,SAAS;AAClD,kBAAc,cAAc,UAAiB;AAC3C,UACE,WACA,gBAAiB,MAAsB,SAAS,MACjD;;;AAIL,QAAK,MAAM,CAAC,WAAW,YAAY,OAAO,QAAQ,cAAc,CAC9D,SAAQ,iBAAiB,WAAW,QAAQ;AAG9C,mBAAgB;AACd,SAAK,MAAM,CAAC,WAAW,YAAY,OAAO,QAAQ,cAAc,CAC9D,SAAQ,oBAAoB,WAAW,QAAQ;KAEjD;IACF;AAEF,eAAa;GACX,MAAMC,aAAsC,EAAE;AAE9C,QAAK,MAAM,CAAC,KAAK,UAAU,OAAO,QAAQ,MAAM,CAC9C,KAAI,UAAU,UAAa,CAAC,IAAI,WAAW,IAAI,CAC7C,YAAW,UAAU,SAAS,IAAI,GAAG,MAAM,MAAM,OAAO;AAK5D,OAAI,aAAa,UAAU,CAAC,WAAW,UACrC,YAAW,SAAS;AAItB,cAAW,MAAM,QAAQ,QAAQ,IAAI;AAErC,cAAW,MAAM;AAEjB,UAAO,EAAE,SAAS,YAAY,MAAM,WAAW,CAAC;;IAGpD;EACE,MAAM;EACN,OAAO;EACP,OAAO;EACR,CACF"}