{"version":3,"file":"prosekit-extensions-search.js","names":[],"sources":["../src/search/index.ts"],"sourcesContent":["import {\n  defineCommands,\n  definePlugin,\n  type Extension,\n  type PlainExtension,\n} from '@prosekit/core'\nimport type { Command } from '@prosekit/pm/state'\nimport type { EditorView } from '@prosekit/pm/view'\nimport {\n  findNext,\n  findNextNoWrap,\n  findPrev,\n  findPrevNoWrap,\n  replaceAll,\n  replaceCurrent,\n  replaceNext,\n  replaceNextNoWrap,\n  search,\n  SearchQuery,\n} from 'prosemirror-search'\n\n/**\n * Options for {@link defineSearchQuery}\n *\n * @public\n */\nexport interface SearchQueryOptions {\n  /**\n   * The search string (or regular expression).\n   */\n  search: string\n\n  /**\n   * The replace text.\n   */\n  replace?: string\n\n  /**\n   * Indicates whether the search is case-sensitive\n   *\n   * @default false\n   */\n  caseSensitive?: boolean\n\n  /**\n   * By default, string search will replace `\\n`, `\\r`, and `\\t` in the query\n   * with newline, return, and tab characters. When this is set to true, that\n   * behavior is disabled.\n   *\n   * @default false\n   */\n  literal?: boolean\n\n  /**\n   * When true, the search string is interpreted as a regular expression.\n   *\n   * @default false\n   */\n  regexp?: boolean\n\n  /**\n   * Enable whole-word matching.\n   *\n   * @default false\n   */\n  wholeWord?: boolean\n}\n\n/**\n * Defines an extension that stores a current search query and replace string.\n *\n * @public\n */\nexport function defineSearchQuery(options: SearchQueryOptions): PlainExtension {\n  const query = new SearchQuery(options)\n  return definePlugin(search({ initialQuery: query }))\n}\n\n/**\n * Scrolls the active search match into view.\n */\nfunction scrollActiveIntoView(view: EditorView) {\n  if (view.isDestroyed) return\n  const active = view.dom.querySelector('.ProseMirror-active-search-match')\n  active?.scrollIntoView({\n    block: 'nearest',\n    inline: 'nearest',\n    behavior: 'smooth',\n  })\n}\n\n/**\n * Wraps a command and scrolls the active search match into view when the command\n * is applied.\n */\nfunction withScrollActiveIntoView(command: Command): Command {\n  return (state, dispatch, view) => {\n    const result = command(state, dispatch, view)\n    if (result && dispatch && view) {\n      // Add a small delay because the command itself will handle scrolling if\n      // the view is focused.\n      setTimeout(() => scrollActiveIntoView(view), 50)\n    }\n    return result\n  }\n}\n\n/**\n * @internal\n */\nexport type SearchCommandsExtension = Extension<{\n  Commands: {\n    findNext: []\n    findPrev: []\n    findNextNoWrap: []\n    findPrevNoWrap: []\n    replaceNext: []\n    replaceNextNoWrap: []\n    replaceCurrent: []\n    replaceAll: []\n  }\n}>\n\n/**\n * Defines commands for search and replace.\n *\n * @public\n */\nexport function defineSearchCommands(): SearchCommandsExtension {\n  return defineCommands({\n    findNext: () => withScrollActiveIntoView(findNext),\n    findPrev: () => withScrollActiveIntoView(findPrev),\n    findNextNoWrap: () => withScrollActiveIntoView(findNextNoWrap),\n    findPrevNoWrap: () => withScrollActiveIntoView(findPrevNoWrap),\n    replaceNext: () => withScrollActiveIntoView(replaceNext),\n    replaceNextNoWrap: () => withScrollActiveIntoView(replaceNextNoWrap),\n    replaceCurrent: () => withScrollActiveIntoView(replaceCurrent),\n    replaceAll: () => withScrollActiveIntoView(replaceAll),\n  })\n}\n"],"mappings":";;;;;;;;;AAyEA,SAAgB,kBAAkB,SAA6C;CAC7E,MAAM,QAAQ,IAAI,YAAY,QAAQ;AACtC,QAAO,aAAa,OAAO,EAAE,cAAc,OAAO,CAAC,CAAC;;;;;AAMtD,SAAS,qBAAqB,MAAkB;AAC9C,KAAI,KAAK,YAAa;AAEtB,CADe,KAAK,IAAI,cAAc,mCAAmC,EACjE,eAAe;EACrB,OAAO;EACP,QAAQ;EACR,UAAU;EACX,CAAC;;;;;;AAOJ,SAAS,yBAAyB,SAA2B;AAC3D,SAAQ,OAAO,UAAU,SAAS;EAChC,MAAM,SAAS,QAAQ,OAAO,UAAU,KAAK;AAC7C,MAAI,UAAU,YAAY,KAGxB,kBAAiB,qBAAqB,KAAK,EAAE,GAAG;AAElD,SAAO;;;;;;;;AAyBX,SAAgB,uBAAgD;AAC9D,QAAO,eAAe;EACpB,gBAAgB,yBAAyB,SAAS;EAClD,gBAAgB,yBAAyB,SAAS;EAClD,sBAAsB,yBAAyB,eAAe;EAC9D,sBAAsB,yBAAyB,eAAe;EAC9D,mBAAmB,yBAAyB,YAAY;EACxD,yBAAyB,yBAAyB,kBAAkB;EACpE,sBAAsB,yBAAyB,eAAe;EAC9D,kBAAkB,yBAAyB,WAAW;EACvD,CAAC"}