{"version":3,"file":"prosekit-extensions-virtual-selection.js","names":[],"sources":["../src/virtual-selection/index.ts"],"sourcesContent":["import {\n  definePlugin,\n  type PlainExtension,\n} from '@prosekit/core'\nimport {\n  PluginKey,\n  ProseMirrorPlugin,\n  type EditorState,\n  type Transaction,\n} from '@prosekit/pm/state'\nimport {\n  Decoration,\n  DecorationSet,\n} from '@prosekit/pm/view'\n\n/**\n * @internal\n */\nexport type VirtualSelectionExtension = PlainExtension\n\n/**\n * Shows a virtual selection when the editor is not focused. When the editor is\n * not focused, the selected inline content will be wrapped in a `<span>`\n * element with the class `prosekit-virtual-selection`.\n *\n * This is useful when you want to move the focus to an element outside the\n * editor, but still want to show the selection.\n *\n * @public\n */\nexport function defineVirtualSelection(): VirtualSelectionExtension {\n  return definePlugin(virtualSelectionPlugin)\n}\n\n// Show the decoration when this is true.\ntype PluginState = boolean\n\nconst key = new PluginKey<PluginState>('prosekit-virtual-selection')\n\nfunction getFocusMeta(tr: Transaction): PluginState | undefined {\n  return tr.getMeta(key) as PluginState | undefined\n}\n\nfunction setFocusMeta(tr: Transaction, value: PluginState) {\n  return tr.setMeta(key, value)\n}\n\nfunction getFocusState(state: EditorState): PluginState | undefined {\n  return key.getState(state)\n}\n\nconst virtualSelectionPlugin = new ProseMirrorPlugin<PluginState>({\n  key,\n  state: {\n    init: () => false,\n    apply: (tr, value) => {\n      return getFocusMeta(tr) ?? value\n    },\n  },\n  props: {\n    handleDOMEvents: {\n      focus: (view) => {\n        view.dispatch(setFocusMeta(view.state.tr, false))\n      },\n\n      blur: (view) => {\n        const { dom, root } = view\n        const activeElement = root.activeElement\n\n        // Don't show the decoration if the dom is blurred because the focus\n        // moved outside the browser window.\n        if (activeElement === dom) return\n\n        view.dispatch(setFocusMeta(view.state.tr, true))\n      },\n    },\n    decorations: (state) => {\n      const { selection, doc } = state\n\n      if (\n        selection.empty\n        || !getFocusState(state)\n        // When `selection.visible` is false, it indicates that the selection is\n        // rendered by the editor and it's not a native browser selection. An\n        // example of this is `NodeSelection`. In this situation, since the\n        // editor already shows the selection, we don't need to display a\n        // virtual selection.\n        || !selection.visible\n      ) {\n        return null\n      }\n\n      return DecorationSet.create(doc, [\n        Decoration.inline(selection.from, selection.to, {\n          class: 'prosekit-virtual-selection',\n        }),\n      ])\n    },\n  },\n})\n"],"mappings":";;;;;;;;;;;;;;;AA8BA,SAAgB,yBAAoD;AAClE,QAAO,aAAa,uBAAuB;;AAM7C,MAAM,MAAM,IAAI,UAAuB,6BAA6B;AAEpE,SAAS,aAAa,IAA0C;AAC9D,QAAO,GAAG,QAAQ,IAAI;;AAGxB,SAAS,aAAa,IAAiB,OAAoB;AACzD,QAAO,GAAG,QAAQ,KAAK,MAAM;;AAG/B,SAAS,cAAc,OAA6C;AAClE,QAAO,IAAI,SAAS,MAAM;;AAG5B,MAAM,yBAAyB,IAAI,kBAA+B;CAChE;CACA,OAAO;EACL,YAAY;EACZ,QAAQ,IAAI,UAAU;AACpB,UAAO,aAAa,GAAG,IAAI;;EAE9B;CACD,OAAO;EACL,iBAAiB;GACf,QAAQ,SAAS;AACf,SAAK,SAAS,aAAa,KAAK,MAAM,IAAI,MAAM,CAAC;;GAGnD,OAAO,SAAS;IACd,MAAM,EAAE,KAAK,SAAS;AAKtB,QAJsB,KAAK,kBAIL,IAAK;AAE3B,SAAK,SAAS,aAAa,KAAK,MAAM,IAAI,KAAK,CAAC;;GAEnD;EACD,cAAc,UAAU;GACtB,MAAM,EAAE,WAAW,QAAQ;AAE3B,OACE,UAAU,SACP,CAAC,cAAc,MAAM,IAMrB,CAAC,UAAU,QAEd,QAAO;AAGT,UAAO,cAAc,OAAO,KAAK,CAC/B,WAAW,OAAO,UAAU,MAAM,UAAU,IAAI,EAC9C,OAAO,8BACR,CAAC,CACH,CAAC;;EAEL;CACF,CAAC"}