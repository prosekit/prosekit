---
import {
  TabItem,
  Tabs,
} from '@astrojs/starlight/components'
import type { ComponentProps } from 'astro/types'
import CodeBlock from './code-block.astro'

type CodeBlockProps = ComponentProps<typeof CodeBlock>

interface Props {
  codes: CodeBlockProps[]
  border?: boolean
  syncKey?: string
}

const { codes, border = true, syncKey } = Astro.props

const titles: string[] = codes.map((code): string => {
  let title = code.title
  if (!title) {
    throw new Error('Code block title is required')
  }
  return title
})

if (new Set(titles).size !== titles.length) {
  throw new Error('Code block titles must be unique')
}
---

<div class:list={['code-group', border ? 'code-group-border' : undefined]}>
  <slot />
  <Tabs syncKey={syncKey}>
    {
      codes.map((code) => (
        <TabItem label={code.title || ''}>
          <CodeBlock {...code} />
        </TabItem>
      ))
    }
  </Tabs>
</div>

<style is:global>
  .sl-markdown-content .code-group {
    overflow: hidden;

    &.code-group-border {
      border-color: var(--sl-color-gray-5);
      border-width: 1px;
      border-style: solid;
      border-radius: 0.5rem;
    }

    starlight-tabs {
      margin-top: 0;
    }

    .tablist-wrapper {
      scrollbar-width: none;

      [role='tablist'] {
        border-bottom-width: 1px;
      }

      [role='tab'] {
        font-family: var(--sl-font-system-mono);
        padding-top: 0.5rem;
        padding-bottom: 0.25rem;
        padding-left: 0.75rem;
        padding-right: 0.75rem;
        font-size: 0.875rem;
        white-space: nowrap;

        border-bottom-style: solid;
        border-bottom-width: 0px;

        &[aria-selected='true'] {
          border-bottom-width: 3px;
        }
      }
    }

    div[role='tabpanel'] {
      margin: 0;
    }

    div[role='tabpanel'] pre {
      border-color: transparent;
    }

    .astro-code {
      border-radius: 0;
    }
  }
</style>
