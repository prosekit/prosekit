{"version":3,"file":"prosekit-extensions-blockquote.js","names":[],"sources":["../src/blockquote/blockquote-commands.ts","../src/blockquote/blockquote-input-rule.ts","../src/blockquote/blockquote-keymap.ts","../src/blockquote/blockquote-spec.ts","../src/blockquote/blockquote.ts"],"sourcesContent":["import {\n  defineCommands,\n  insertNode,\n  toggleWrap,\n  wrap,\n  type Extension,\n} from '@prosekit/core'\n\nexport type BlockquoteCommandsExtension = Extension<{\n  Commands: {\n    setBlockquote: []\n    insertBlockquote: []\n    toggleBlockquote: []\n  }\n}>\n\n/**\n * @internal\n */\nexport function defineBlockquoteCommands(): BlockquoteCommandsExtension {\n  return defineCommands({\n    setBlockquote: () => {\n      return wrap({ type: 'blockquote' })\n    },\n    insertBlockquote: () => {\n      return insertNode({ type: 'blockquote' })\n    },\n    toggleBlockquote: () => {\n      return toggleWrap({ type: 'blockquote' })\n    },\n  })\n}\n","import type { PlainExtension } from '@prosekit/core'\n\nimport { defineWrappingInputRule } from '../input-rule'\n\n/**\n * Wraps the text block in a blockquote when `>` is typed at the start of a new\n * line followed by a space.\n */\nexport function defineBlockquoteInputRule(): PlainExtension {\n  return defineWrappingInputRule({\n    regex: /^>\\s/,\n    type: 'blockquote',\n  })\n}\n","import {\n  defineKeymap,\n  isAtBlockStart,\n  toggleWrap,\n  type PlainExtension,\n} from '@prosekit/core'\nimport { joinBackward } from '@prosekit/pm/commands'\nimport type { Command } from '@prosekit/pm/state'\n\nfunction toggleBlockquoteKeybinding(): Command {\n  return toggleWrap({ type: 'blockquote' })\n}\n\nfunction backspaceUnsetBlockquote(): Command {\n  return (state, dispatch, view) => {\n    const $pos = isAtBlockStart(state, view)\n    if ($pos?.node(-1).type.name === 'blockquote') {\n      return joinBackward(state, dispatch, view)\n    }\n    return false\n  }\n}\n/**\n * @internal\n */\nexport function defineBlockquoteKeymap(): PlainExtension {\n  return defineKeymap({\n    'mod-shift-b': toggleBlockquoteKeybinding(),\n    'Backspace': backspaceUnsetBlockquote(),\n  })\n}\n","import {\n  defineNodeSpec,\n  type Extension,\n} from '@prosekit/core'\nimport type { Attrs } from '@prosekit/pm/model'\n\nexport type BlockquoteSpecExtension = Extension<{\n  Nodes: {\n    blockquote: Attrs\n  }\n}>\n\nexport function defineBlockquoteSpec(): BlockquoteSpecExtension {\n  return defineNodeSpec({\n    name: 'blockquote',\n    content: 'block+',\n    group: 'block',\n    defining: true,\n    parseDOM: [{ tag: 'blockquote' }],\n    toDOM() {\n      return ['blockquote', 0]\n    },\n  })\n}\n","import {\n  union,\n  type Union,\n} from '@prosekit/core'\n\nimport {\n  defineBlockquoteCommands,\n  type BlockquoteCommandsExtension,\n} from './blockquote-commands'\nimport { defineBlockquoteInputRule } from './blockquote-input-rule'\nimport { defineBlockquoteKeymap } from './blockquote-keymap'\nimport {\n  defineBlockquoteSpec,\n  type BlockquoteSpecExtension,\n} from './blockquote-spec'\n\n/**\n * @internal\n */\nexport type BlockquoteExtension = Union<\n  [BlockquoteSpecExtension, BlockquoteCommandsExtension]\n>\n\n/**\n * @public\n */\nexport function defineBlockquote(): BlockquoteExtension {\n  return union(\n    defineBlockquoteSpec(),\n    defineBlockquoteInputRule(),\n    defineBlockquoteCommands(),\n    defineBlockquoteKeymap(),\n  )\n}\n"],"mappings":";;;;;;;;AAmBA,SAAgB,2BAAwD;AACtE,QAAO,eAAe;EACpB,qBAAqB;AACnB,UAAO,KAAK,EAAE,MAAM,cAAc,CAAC;;EAErC,wBAAwB;AACtB,UAAO,WAAW,EAAE,MAAM,cAAc,CAAC;;EAE3C,wBAAwB;AACtB,UAAO,WAAW,EAAE,MAAM,cAAc,CAAC;;EAE5C,CAAC;;;;;;;;;ACtBJ,SAAgB,4BAA4C;AAC1D,QAAO,wBAAwB;EAC7B,OAAO;EACP,MAAM;EACP,CAAC;;;;;ACHJ,SAAS,6BAAsC;AAC7C,QAAO,WAAW,EAAE,MAAM,cAAc,CAAC;;AAG3C,SAAS,2BAAoC;AAC3C,SAAQ,OAAO,UAAU,SAAS;AAEhC,MADa,eAAe,OAAO,KAAK,EAC9B,KAAK,GAAG,CAAC,KAAK,SAAS,aAC/B,QAAO,aAAa,OAAO,UAAU,KAAK;AAE5C,SAAO;;;;;;AAMX,SAAgB,yBAAyC;AACvD,QAAO,aAAa;EAClB,eAAe,4BAA4B;EAC3C,aAAa,0BAA0B;EACxC,CAAC;;;;;ACjBJ,SAAgB,uBAAgD;AAC9D,QAAO,eAAe;EACpB,MAAM;EACN,SAAS;EACT,OAAO;EACP,UAAU;EACV,UAAU,CAAC,EAAE,KAAK,cAAc,CAAC;EACjC,QAAQ;AACN,UAAO,CAAC,cAAc,EAAE;;EAE3B,CAAC;;;;;;;;ACIJ,SAAgB,mBAAwC;AACtD,QAAO,MACL,sBAAsB,EACtB,2BAA2B,EAC3B,0BAA0B,EAC1B,wBAAwB,CACzB"}