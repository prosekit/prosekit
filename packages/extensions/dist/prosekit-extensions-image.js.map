{"version":3,"file":"prosekit-extensions-image.js","names":["width: number | null","height: number | null"],"sources":["../src/image/image-commands.ts","../src/image/image-spec.ts","../src/image/image.ts"],"sourcesContent":["import {\n  defineCommands,\n  insertNode,\n  type Extension,\n} from '@prosekit/core'\n\nimport type { ImageAttrs } from './image-spec'\n\n/**\n * @internal\n */\nexport type ImageCommandsExtension = Extension<{\n  Commands: {\n    insertImage: [attrs?: ImageAttrs]\n  }\n}>\n\n/**\n * @internal\n */\nexport function defineImageCommands(): ImageCommandsExtension {\n  return defineCommands({\n    insertImage: (attrs?: ImageAttrs) => {\n      return insertNode({ type: 'image', attrs })\n    },\n  })\n}\n","import {\n  defineNodeSpec,\n  type Extension,\n} from '@prosekit/core'\n\n/**\n * @public\n */\nexport interface ImageAttrs {\n  src?: string | null\n  width?: number | null\n  height?: number | null\n}\n\n/**\n * @internal\n */\nexport type ImageSpecExtension = Extension<{\n  Nodes: {\n    image: ImageAttrs\n  }\n}>\n\n/**\n * @internal\n */\nexport function defineImageSpec(): ImageSpecExtension {\n  return defineNodeSpec({\n    name: 'image',\n    attrs: {\n      src: { default: null, validate: 'string|null' },\n      width: { default: null, validate: 'number|null' },\n      height: { default: null, validate: 'number|null' },\n    },\n    group: 'block',\n    defining: true,\n    draggable: true,\n    parseDOM: [\n      {\n        tag: 'img[src]',\n        getAttrs: (element): ImageAttrs => {\n          if (typeof element === 'string') {\n            return { src: null }\n          }\n\n          const src = element.getAttribute('src') || null\n\n          let width: number | null = null\n          let height: number | null = null\n\n          const rect = element.getBoundingClientRect()\n          if (rect.width > 0 && rect.height > 0) {\n            width = rect.width\n            height = rect.height\n          } else if (\n            element instanceof HTMLImageElement\n            && element.naturalWidth > 0\n            && element.naturalHeight > 0\n          ) {\n            width = element.naturalWidth\n            height = element.naturalHeight\n          }\n          return { src, width, height }\n        },\n      },\n    ],\n    toDOM(node) {\n      const attrs = node.attrs as ImageAttrs\n      return ['img', attrs]\n    },\n  })\n}\n","import {\n  union,\n  type Union,\n} from '@prosekit/core'\n\nimport {\n  defineImageCommands,\n  type ImageCommandsExtension,\n} from './image-commands'\nimport {\n  defineImageSpec,\n  type ImageSpecExtension,\n} from './image-spec'\n\n/**\n * @internal\n */\nexport type ImageExtension = Union<[ImageSpecExtension, ImageCommandsExtension]>\n\n/**\n * @public\n */\nexport function defineImage(): ImageExtension {\n  return union(defineImageSpec(), defineImageCommands())\n}\n"],"mappings":";;;;;;AAoBA,SAAgB,sBAA8C;AAC5D,QAAO,eAAe,EACpB,cAAc,UAAuB;AACnC,SAAO,WAAW;GAAE,MAAM;GAAS;GAAO,CAAC;IAE9C,CAAC;;;;;;;;ACCJ,SAAgB,kBAAsC;AACpD,QAAO,eAAe;EACpB,MAAM;EACN,OAAO;GACL,KAAK;IAAE,SAAS;IAAM,UAAU;IAAe;GAC/C,OAAO;IAAE,SAAS;IAAM,UAAU;IAAe;GACjD,QAAQ;IAAE,SAAS;IAAM,UAAU;IAAe;GACnD;EACD,OAAO;EACP,UAAU;EACV,WAAW;EACX,UAAU,CACR;GACE,KAAK;GACL,WAAW,YAAwB;AACjC,QAAI,OAAO,YAAY,SACrB,QAAO,EAAE,KAAK,MAAM;IAGtB,MAAM,MAAM,QAAQ,aAAa,MAAM,IAAI;IAE3C,IAAIA,QAAuB;IAC3B,IAAIC,SAAwB;IAE5B,MAAM,OAAO,QAAQ,uBAAuB;AAC5C,QAAI,KAAK,QAAQ,KAAK,KAAK,SAAS,GAAG;AACrC,aAAQ,KAAK;AACb,cAAS,KAAK;eAEd,mBAAmB,oBAChB,QAAQ,eAAe,KACvB,QAAQ,gBAAgB,GAC3B;AACA,aAAQ,QAAQ;AAChB,cAAS,QAAQ;;AAEnB,WAAO;KAAE;KAAK;KAAO;KAAQ;;GAEhC,CACF;EACD,MAAM,MAAM;AAEV,UAAO,CAAC,OADM,KAAK,MACE;;EAExB,CAAC;;;;;;;;AChDJ,SAAgB,cAA8B;AAC5C,QAAO,MAAM,iBAAiB,EAAE,qBAAqB,CAAC"}