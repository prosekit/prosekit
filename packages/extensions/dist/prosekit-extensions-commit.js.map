{"version":3,"file":"prosekit-extensions-commit.js","names":["decorations: Decoration[]","commit: Commit"],"sources":["../src/commit/index.ts"],"sourcesContent":["import {\n  defineDefaultState,\n  definePlugin,\n  jsonFromNode,\n  union,\n  type NodeJSON,\n  type PlainExtension,\n  type StepJSON,\n} from '@prosekit/core'\nimport {\n  DOMSerializer,\n  Fragment,\n  Slice,\n  type ProseMirrorNode,\n} from '@prosekit/pm/model'\nimport {\n  PluginKey,\n  ProseMirrorPlugin,\n  type Transaction,\n} from '@prosekit/pm/state'\nimport { Step } from '@prosekit/pm/transform'\nimport {\n  Decoration,\n  DecorationSet,\n  type EditorView,\n} from '@prosekit/pm/view'\nimport {\n  ChangeSet,\n  type Change,\n} from 'prosemirror-changeset'\n\n/**\n * A JSON representation of a commit.\n */\ninterface Commit {\n  /**\n   * The current doc node in the JSON format\n   */\n  doc: NodeJSON\n  /**\n   * The parent node in the JSON format\n   */\n  parent: NodeJSON\n  /**\n   * An array of steps in the JSON format that transform the parent node to the\n   * current doc node.\n   */\n  steps: StepJSON[]\n}\n\nfunction getChanges(\n  doc: ProseMirrorNode,\n  parent: ProseMirrorNode,\n  steps: Step[],\n): readonly Change[] {\n  const initSet = ChangeSet.create(parent)\n  const currSet = initSet.addSteps(\n    doc,\n    steps.map((step) => step.getMap()),\n    null,\n  )\n  return currSet.changes\n}\n\nfunction renderDivWeight(view: EditorView): HTMLElement {\n  const document = view.dom.ownerDocument\n  return document.createElement('div')\n}\n\nfunction decorateDeletionSlice(\n  slice: Slice,\n): Array<(view: EditorView) => HTMLElement> {\n  // Get the fragment of the deleted content\n  let { openStart, openEnd, content } = slice\n\n  while (openStart > 0 && openEnd > 0 && content.childCount === 1) {\n    openStart--\n    openEnd--\n    content = content.child(0).content\n  }\n\n  // Nothing to render\n  if (content.childCount === 0) {\n    return []\n  }\n\n  // For example, if the slice is\n  //   {\n  //     openStart: 1,\n  //     openEnd: 1,\n  //     content: <p>Hello</p><p>World</p>\n  //   }\n  // We should render the following decorations:\n  //   <span>Hello</span>\n  //   <div></div>\n  //   <span>World</span>\n  if (openStart > 0 && openEnd > 0 && content.childCount === 2) {\n    const head = Fragment.from([content.child(0)])\n    const tail = Fragment.from([content.child(1)])\n    return [\n      ...decorateDeletionSlice(new Slice(head, openStart, openStart)),\n      renderDivWeight,\n      ...decorateDeletionSlice(new Slice(tail, openEnd, openEnd)),\n    ]\n  }\n\n  // For example, if the slice is\n  //   {\n  //     openStart: 1,\n  //     openEnd: 0,\n  //     content: <p>Hello</p><p>World</p>\n  //   }\n  // We should render the following decorations:\n  //   <span>Hello</span>\n  //   <div><p>World</p></div>\n  if (openStart > 0 && content.childCount >= 2) {\n    const nodes = content.content\n    const head = Fragment.from(nodes.slice(0, 1))\n    const body = Fragment.from(nodes.slice(1))\n\n    return [\n      ...decorateDeletionSlice(new Slice(head, openStart, openStart)),\n      ...decorateDeletionSlice(new Slice(body, 0, openEnd)),\n    ]\n  }\n\n  // For example, if the slice is\n  //   {\n  //     openStart: 0,\n  //     openEnd: 1,\n  //     content: <p>Hello</p><p>World</p>\n  //   }\n  // We should render the following decorations:\n  //   <div><p>Hello</p></div>\n  //   <span>World</span>\n  if (openEnd > 0 && content.childCount >= 2) {\n    const nodes = content.content\n    const body = Fragment.from(nodes.slice(0, -1))\n    const tail = Fragment.from(nodes.slice(-1))\n    return [\n      ...decorateDeletionSlice(new Slice(body, openStart, 0)),\n      ...decorateDeletionSlice(new Slice(tail, openEnd, openEnd)),\n    ]\n  }\n\n  const schema = content.child(0).type.schema\n  const isInline = content.child(0).isInline\n\n  const render = (view: EditorView): HTMLElement => {\n    const document = view.dom.ownerDocument\n\n    // Render the fragment to HTML\n    const element = document.createElement(isInline ? 'span' : 'div')\n    const serializer = DOMSerializer.fromSchema(schema)\n    serializer.serializeFragment(content, { document }, element)\n\n    // Add the class to the element\n    element.classList.add('prosekit-commit-deletion')\n    return element\n  }\n\n  return [render]\n}\n\nfunction decorateDeletion(\n  /** The doc node before the deletion */\n  doc: ProseMirrorNode,\n  /** The start position of the deleted text in the doc node */\n  from: number,\n  /** The end position of the deleted text in the doc node */\n  to: number,\n  /** The insert position of the decoration in the doc node after the change */\n  pos: number,\n): Decoration[] {\n  const slice = doc.slice(from, to)\n\n  const renders = decorateDeletionSlice(slice)\n  const count = renders.length\n\n  return renders.map((render, index) =>\n    Decoration.widget(pos, render, {\n      side: -20 - count + index,\n      // Ensure the text in the decoration is able to be selected.\n      ignoreSelection: true,\n    })\n  )\n}\n\nfunction decorateAddition(\n  /** The start position of the inserted text in the doc node */\n  from: number,\n  /** The end position of the inserted text in the doc node */\n  to: number,\n): Decoration {\n  return Decoration.inline(from, to, { class: 'prosekit-commit-addition' })\n}\n\nfunction decorateChange(prev: ProseMirrorNode, change: Change): Decoration[] {\n  const { fromA, toA, fromB, toB } = change\n  const decorations: Decoration[] = []\n\n  if (fromA < toA) {\n    decorations.push(...decorateDeletion(prev, fromA, toA, fromB))\n  }\n  if (fromB < toB) {\n    decorations.push(decorateAddition(fromB, toB))\n  }\n\n  return decorations\n}\n\nfunction decorateCommit(\n  doc: ProseMirrorNode,\n  parent: ProseMirrorNode,\n  steps: Step[],\n): DecorationSet {\n  const changes = getChanges(doc, parent, steps)\n  const decorations = changes.flatMap((change) => decorateChange(parent, change))\n  return DecorationSet.create(doc, decorations)\n}\n\nfunction defineCommitDecoration(commit: Commit): PlainExtension {\n  const key = new PluginKey<DecorationSet>('prosekit-commit-decoration')\n\n  return definePlugin(({ schema }): ProseMirrorPlugin => {\n    const parent = schema.nodeFromJSON(commit.parent)\n    const steps = commit.steps.map((step) => Step.fromJSON(schema, step))\n\n    return new ProseMirrorPlugin({\n      key,\n      state: {\n        init: (_, instance): DecorationSet => {\n          return decorateCommit(instance.doc, parent, steps)\n        },\n        apply: (tr, deco: DecorationSet): DecorationSet => {\n          return deco.map(tr.mapping, tr.doc)\n        },\n      },\n      props: {\n        decorations: (state): DecorationSet | undefined => {\n          return key.getState(state)\n        },\n      },\n    })\n  })\n}\n\n/**\n * Define an extension to display the changes from the given commit in the editor.\n */\nfunction defineCommitViewer(commit: Commit): PlainExtension {\n  return union(\n    defineDefaultState({ defaultDoc: commit.doc }),\n    defineCommitDecoration(commit),\n  )\n}\n\nclass CommitRecorder {\n  private parent: ProseMirrorNode | null = null\n  private doc: ProseMirrorNode | null = null\n  private steps: Step[] = []\n\n  /**\n   * Return a commit object including all changes since the last commit. `null`\n   * will be returned if there is no change.\n   */\n  commit(): Commit | null {\n    if (\n      !this.parent\n      || !this.doc\n      || this.steps.length === 0\n      || this.parent.eq(this.doc)\n    ) {\n      return null\n    }\n\n    const commit: Commit = {\n      doc: jsonFromNode(this.doc),\n      parent: jsonFromNode(this.parent),\n      steps: this.steps.map((step) => step.toJSON() as StepJSON),\n    }\n    this.init(this.doc)\n    return commit\n  }\n\n  /**\n   * @internal\n   */\n  init(doc: ProseMirrorNode): void {\n    this.doc = doc\n    this.parent = doc\n    this.steps = []\n  }\n\n  /**\n   * @internal\n   */\n  apply(tr: Transaction): void {\n    this.steps.push(...tr.steps)\n    this.doc = tr.doc\n  }\n}\n\n/**\n * Define an extension that can record the changes in the editor.\n */\nfunction defineCommitRecorder(commitRecorder: CommitRecorder): PlainExtension {\n  const key = new PluginKey<DecorationSet>('prosekit-commit-recorder')\n\n  return definePlugin(\n    new ProseMirrorPlugin({\n      key,\n      state: {\n        init: (_, state): void => {\n          commitRecorder.init(state.doc)\n        },\n        apply: (tr): void => {\n          commitRecorder.apply(tr)\n        },\n      },\n    }),\n  )\n}\n\nexport {\n  CommitRecorder,\n  defineCommitRecorder,\n  defineCommitViewer,\n  type Commit,\n}\n"],"mappings":"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"}