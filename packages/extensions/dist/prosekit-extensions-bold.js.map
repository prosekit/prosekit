{"version":3,"file":"prosekit-extensions-bold.js","names":[],"sources":["../src/bold/bold-commands.ts","../src/bold/bold-input-rule.ts","../src/bold/bold-keymap.ts","../src/bold/bold-spec.ts","../src/bold/bold.ts"],"sourcesContent":["import {\n  defineCommands,\n  toggleMark,\n  type Extension,\n} from '@prosekit/core'\n\n/**\n * @internal\n */\nexport type BoldCommandsExtension = Extension<{\n  Commands: {\n    toggleBold: []\n  }\n}>\n\n/**\n * @internal\n */\nexport function defineBoldCommands(): BoldCommandsExtension {\n  return defineCommands({\n    toggleBold: () => toggleMark({ type: 'bold' }),\n  })\n}\n","import {\n  canUseRegexLookbehind,\n  type PlainExtension,\n} from '@prosekit/core'\n\nimport { defineMarkInputRule } from '../input-rule'\n\n/**\n * @internal\n */\nexport function defineBoldInputRule(): PlainExtension {\n  return defineMarkInputRule({\n    regex: canUseRegexLookbehind()\n      ? /(?<=\\s|^)\\*\\*([^\\s*]|[^\\s*][^*]*[^\\s*])\\*\\*$/\n      : /\\*\\*([^\\s*]|[^\\s*][^*]*[^\\s*])\\*\\*$/,\n    type: 'bold',\n  })\n}\n","import {\n  defineKeymap,\n  toggleMark,\n  type PlainExtension,\n} from '@prosekit/core'\n\n/**\n * @internal\n */\nexport function defineBoldKeymap(): PlainExtension {\n  return defineKeymap({\n    'Mod-b': toggleMark({ type: 'bold' }),\n  })\n}\n","import {\n  defineMarkSpec,\n  type Extension,\n} from '@prosekit/core'\nimport type { Attrs } from '@prosekit/pm/model'\n\n/**\n * @internal\n */\nexport type BoldSpecExtension = Extension<{\n  Marks: {\n    bold: Attrs\n  }\n}>\n\n/**\n * @internal\n */\nexport function defineBoldSpec(): BoldSpecExtension {\n  return defineMarkSpec({\n    name: 'bold',\n    parseDOM: [\n      { tag: 'strong' },\n      // This works around a Google Docs misbehavior where\n      // pasted content will be inexplicably wrapped in `<b>`\n      // tags with a font-weight normal.\n      {\n        tag: 'b',\n        getAttrs: (node: string | HTMLElement): null | false => {\n          return (\n            typeof node !== 'string'\n            && node.style.fontWeight !== 'normal'\n            && null\n          )\n        },\n      },\n      { style: 'font-weight=400', clearMark: (m) => m.type.name == 'strong' },\n      {\n        style: 'font-weight',\n        getAttrs: (value: string | HTMLElement): null | false => {\n          return (\n            typeof value === 'string'\n            && /^(bold(er)?|[5-9]\\d{2,})$/.test(value)\n            && null\n          )\n        },\n      },\n    ],\n    toDOM() {\n      return ['strong', 0]\n    },\n  })\n}\n","import {\n  union,\n  type Union,\n} from '@prosekit/core'\n\nimport {\n  defineBoldCommands,\n  type BoldCommandsExtension,\n} from './bold-commands'\nimport { defineBoldInputRule } from './bold-input-rule'\nimport { defineBoldKeymap } from './bold-keymap'\nimport {\n  defineBoldSpec,\n  type BoldSpecExtension,\n} from './bold-spec'\n\n/**\n * @internal\n */\nexport type BoldExtension = Union<[BoldSpecExtension, BoldCommandsExtension]>\n\n/**\n * @public\n */\nexport function defineBold(): BoldExtension {\n  return union(\n    defineBoldSpec(),\n    defineBoldCommands(),\n    defineBoldKeymap(),\n    defineBoldInputRule(),\n  )\n}\n"],"mappings":";;;;;;;AAkBA,SAAgB,qBAA4C;AAC1D,QAAO,eAAe,EACpB,kBAAkB,WAAW,EAAE,MAAM,QAAQ,CAAC,EAC/C,CAAC;;;;;;;;ACXJ,SAAgB,sBAAsC;AACpD,QAAO,oBAAoB;EACzB,OAAO,uBAAuB,GAC1B,iDACA;EACJ,MAAM;EACP,CAAC;;;;;;;;ACPJ,SAAgB,mBAAmC;AACjD,QAAO,aAAa,EAClB,SAAS,WAAW,EAAE,MAAM,QAAQ,CAAC,EACtC,CAAC;;;;;;;;ACMJ,SAAgB,iBAAoC;AAClD,QAAO,eAAe;EACpB,MAAM;EACN,UAAU;GACR,EAAE,KAAK,UAAU;GAIjB;IACE,KAAK;IACL,WAAW,SAA6C;AACtD,YACE,OAAO,SAAS,YACb,KAAK,MAAM,eAAe,YAC1B;;IAGR;GACD;IAAE,OAAO;IAAmB,YAAY,MAAM,EAAE,KAAK,QAAQ;IAAU;GACvE;IACE,OAAO;IACP,WAAW,UAA8C;AACvD,YACE,OAAO,UAAU,YACd,4BAA4B,KAAK,MAAM,IACvC;;IAGR;GACF;EACD,QAAQ;AACN,UAAO,CAAC,UAAU,EAAE;;EAEvB,CAAC;;;;;;;;AC3BJ,SAAgB,aAA4B;AAC1C,QAAO,MACL,gBAAgB,EAChB,oBAAoB,EACpB,kBAAkB,EAClB,qBAAqB,CACtB"}