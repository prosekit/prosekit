import { groupBy } from 'lodash-es'

import { readExampleMeta, type Example } from './example-meta'
import { vfs } from './virtual-file-system'

export async function genExampleCodeBlocks() {
  const meta = await readExampleMeta()
  const stories = groupBy(meta.examples, (example) => {
    return example.story
  })

  await vfs.cleanFilesInDir('website/example-code-blocks')

  for (const [story, examples] of Object.entries(stories)) {
    if (!story) continue

    const fileNames = examples
      .flatMap((example) => example.files)
      .filter((file) => !file.hidden)
      .map((file) => file.path)
      .map(getFileNameWithoutExt)

    for (const fileName of new Set(fileNames)) {
      await vfs.updateText(
        `website/example-code-blocks/${story}/${fileName}.md`,
        formatFiles(examples, fileName),
      )
    }
  }
}

function formatFiles(examples: Example[], fileName: string) {
  return (
    `
<!-- This file is generated by gen-example-code-blocks.ts -->

<FrameworkCodeBlock>

${examples
  .map((example) => formatFile(example, fileName))
  .filter(Boolean)
  .join('\n\n')}

</FrameworkCodeBlock>
 
    `.trim() + '\n'
  )
}

function formatFile(example: Example, fileName: string) {
  let filePath = ''

  for (const file of example.files) {
    if (!file.hidden && fileName === getFileNameWithoutExt(file.path)) {
      filePath = file.path
      break
    }
  }

  if (!filePath) {
    return ''
  }

  return `
<template v-slot:${example.framework}>

::: code-group

<<< @/../playground/examples/${example.framework}/${example.story}/${filePath}

:::

</template>  
    `.trim()
}

function getFileNameWithoutExt(filePath: string) {
  return filePath.split('/').at(-1)!.split('.').slice(0, -1).join('.')
}
