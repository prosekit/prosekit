{"version":3,"file":"prosekit-extensions-text-align.js","names":[],"sources":["../src/text-align/index.ts"],"sourcesContent":["import {\n  defineCommands,\n  defineKeymap,\n  defineNodeAttr,\n  setNodeAttrs,\n  union,\n  type Extension,\n  type PlainExtension,\n  type Union,\n} from '@prosekit/core'\nimport type { Command } from '@prosekit/pm/state'\n\n/**\n * @public\n */\nexport interface TextAlignOptions<NodeName extends string = string> {\n  /**\n   * The names of node to add the attribute to.\n   *\n   * @example\n   *\n   * [\"paragraph\", \"heading\"]\n   */\n  types: NodeName[]\n\n  /**\n   * The default value for the attribute.\n   *\n   * @default \"left\"\n   */\n  default?: string\n}\n\nfunction defineTextAlignAttr<NodeName extends string>(\n  type: NodeName,\n  defaultValue: string | null,\n) {\n  return defineNodeAttr<NodeName, 'textAlign', string | null>({\n    type,\n    attr: 'textAlign',\n    default: defaultValue,\n    splittable: true,\n    toDOM: (value: any) => (value ? ['style', `text-align:${value};`] : null),\n    parseDOM: (node: HTMLElement) => {\n      return node.style.getPropertyValue('text-align') || null\n    },\n  })\n}\n\n/**\n * @internal\n */\nexport type TextAlignAttrsExtension<NodeName extends string> = Extension<{\n  Nodes: { [K in NodeName]: { textAlign: string | null } }\n}>\n\n/**\n * @internal\n */\nfunction defineTextAlignAttrs<NodeName extends string>(\n  types: NodeName[],\n  defaultValue: string | null,\n): TextAlignAttrsExtension<NodeName> {\n  return union(types.map((type) => defineTextAlignAttr(type, defaultValue)))\n}\n\n/**\n * @internal\n */\nexport function setTextAlign({\n  types,\n  value,\n}: {\n  types: string[]\n  value: string | null\n}): Command {\n  return setNodeAttrs({ type: types, attrs: { textAlign: value } })\n}\n\n/**\n * @internal\n */\nexport type TextAlignCommandsExtension = Extension<{\n  Commands: {\n    setTextAlign: [value: string | null]\n  }\n}>\n\n/**\n * @internal\n */\nexport function defineTextAlignCommands(\n  types: string[],\n): TextAlignCommandsExtension {\n  return defineCommands({\n    setTextAlign: (value: string | null) => setTextAlign({ types, value }),\n  })\n}\n\n/**\n * @internal\n */\nexport function defineTextAlignKeymap(types: string[]): PlainExtension {\n  return defineKeymap({\n    'mod-shift-l': setTextAlign({ types, value: 'left' }),\n    'mod-shift-e': setTextAlign({ types, value: 'center' }),\n    'mod-shift-r': setTextAlign({ types, value: 'right' }),\n    'mod-shift-j': setTextAlign({ types, value: 'justify' }),\n  })\n}\n\n/**\n * @internal\n */\nexport type TextAlignExtension<NodeName extends string> = Union<\n  [TextAlignAttrsExtension<NodeName>, TextAlignCommandsExtension]\n>\n\n/**\n * Adds a `textAlign` attribute to the specified nodes. This will be rendered as\n * a CSS `text-align` style.\n *\n * @public\n */\nexport function defineTextAlign<NodeName extends string = string>(\n  options: TextAlignOptions<NodeName>,\n): TextAlignExtension<NodeName> {\n  return union(\n    defineTextAlignAttrs<NodeName>(options.types, options.default || 'left'),\n    defineTextAlignKeymap(options.types),\n    defineTextAlignCommands(options.types),\n  )\n}\n"],"mappings":";;;AAiCA,SAAS,oBACP,MACA,cACA;AACA,QAAO,eAAqD;EAC1D;EACA,MAAM;EACN,SAAS;EACT,YAAY;EACZ,QAAQ,UAAgB,QAAQ,CAAC,SAAS,cAAc,MAAM,GAAG,GAAG;EACpE,WAAW,SAAsB;AAC/B,UAAO,KAAK,MAAM,iBAAiB,aAAa,IAAI;;EAEvD,CAAC;;;;;AAaJ,SAAS,qBACP,OACA,cACmC;AACnC,QAAO,MAAM,MAAM,KAAK,SAAS,oBAAoB,MAAM,aAAa,CAAC,CAAC;;;;;AAM5E,SAAgB,aAAa,EAC3B,OACA,SAIU;AACV,QAAO,aAAa;EAAE,MAAM;EAAO,OAAO,EAAE,WAAW,OAAO;EAAE,CAAC;;;;;AAenE,SAAgB,wBACd,OAC4B;AAC5B,QAAO,eAAe,EACpB,eAAe,UAAyB,aAAa;EAAE;EAAO;EAAO,CAAC,EACvE,CAAC;;;;;AAMJ,SAAgB,sBAAsB,OAAiC;AACrE,QAAO,aAAa;EAClB,eAAe,aAAa;GAAE;GAAO,OAAO;GAAQ,CAAC;EACrD,eAAe,aAAa;GAAE;GAAO,OAAO;GAAU,CAAC;EACvD,eAAe,aAAa;GAAE;GAAO,OAAO;GAAS,CAAC;EACtD,eAAe,aAAa;GAAE;GAAO,OAAO;GAAW,CAAC;EACzD,CAAC;;;;;;;;AAgBJ,SAAgB,gBACd,SAC8B;AAC9B,QAAO,MACL,qBAA+B,QAAQ,OAAO,QAAQ,WAAW,OAAO,EACxE,sBAAsB,QAAQ,MAAM,EACpC,wBAAwB,QAAQ,MAAM,CACvC"}