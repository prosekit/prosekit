{"version":3,"file":"prosekit-extensions-list.js","names":["onDrag: DragEventHandler"],"sources":["../src/list/list-commands.ts","../src/list/list-drop-indicator.ts","../src/list/list-input-rules.ts","../src/list/list-keymap.ts","../src/list/list-plugins.ts","../src/list/list-serializer.ts","../src/list/list-spec.ts","../src/list/list.ts"],"sourcesContent":["import {\n  defineCommands,\n  insertNode,\n  type Extension,\n} from '@prosekit/core'\nimport type { Command } from '@prosekit/pm/state'\nimport {\n  createDedentListCommand as dedentList,\n  createIndentListCommand as indentList,\n  createMoveListCommand as moveList,\n  createSplitListCommand as splitList,\n  createToggleCollapsedCommand as toggleCollapsed,\n  createToggleListCommand as toggleList,\n  createUnwrapListCommand as unwrapList,\n  createWrapInListCommand as wrapInList,\n  type DedentListOptions,\n  type IndentListOptions,\n  type ListAttributes,\n  type ToggleCollapsedOptions,\n  type UnwrapListOptions,\n} from 'prosemirror-flat-list'\n\nfunction insertList(attrs?: ListAttributes): Command {\n  return insertNode({ type: 'list', attrs })\n}\n\n/**\n * @internal\n */\nexport type ListCommandsExtension = Extension<{\n  Commands: {\n    dedentList: [options?: DedentListOptions]\n    indentList: [options?: IndentListOptions]\n    moveList: [direction: 'up' | 'down']\n    splitList: []\n    toggleCollapsed: [options?: ToggleCollapsedOptions]\n    unwrapList: [options?: UnwrapListOptions]\n    toggleList: [attrs?: ListAttributes]\n    wrapInList: [attrs?: ListAttributes]\n    insertList: [attrs?: ListAttributes]\n  }\n}>\n\n/**\n * Defines list commands.\n *\n * @internal\n */\nexport function defineListCommands(): ListCommandsExtension {\n  return defineCommands({\n    dedentList,\n    indentList,\n    moveList,\n    splitList,\n    toggleCollapsed,\n    unwrapList,\n    toggleList,\n    wrapInList,\n    insertList,\n  })\n}\n","import type { PlainExtension } from '@prosekit/core'\n\nimport type { DragEventHandler } from '../drop-indicator'\nimport { defineDropIndicator } from '../drop-indicator'\n\n/**\n * Configures drop indicator to avoid unexpected drop point.\n *\n * We don't want to drag a list node and drop it as the first\n * child of another list node.\n *\n * @internal\n */\nexport function defineListDropIndicator(): PlainExtension {\n  return defineDropIndicator({\n    onDrag,\n  })\n}\n\nconst onDrag: DragEventHandler = ({ view, pos }): boolean => {\n  const slice = view.dragging?.slice\n  if (\n    slice\n    && slice.openStart === 0\n    && slice.openEnd === 0\n    && slice.content.childCount === 1\n  ) {\n    const node = slice.content.child(0)\n    if (node.type.name === 'list') {\n      const $pos = view.state.doc.resolve(pos)\n      if ($pos.parent.type.name === 'list' && $pos.index() === 0) {\n        return false\n      }\n    }\n  }\n  return true\n}\n","import {\n  union,\n  type Extension,\n} from '@prosekit/core'\nimport { listInputRules } from 'prosemirror-flat-list'\n\nimport { defineInputRule } from '../input-rule'\n\n/**\n * @internal\n */\nexport function defineListInputRules(): Extension {\n  return union(listInputRules.map(defineInputRule))\n}\n","import {\n  defineKeymap,\n  type PlainExtension,\n} from '@prosekit/core'\nimport {\n  chainCommands,\n  deleteSelection,\n} from '@prosekit/pm/commands'\nimport {\n  createDedentListCommand,\n  createIndentListCommand,\n  deleteCommand,\n  enterCommand,\n  joinCollapsedListBackward,\n  joinListUp,\n  protectCollapsed,\n} from 'prosemirror-flat-list'\n\n// This is different from the one exported by prosemirror-flat-list, because\n// some commands are moved to `defineBaseKeymap` in `prosekit/core`.\nconst backspaceCommand = chainCommands(\n  protectCollapsed,\n  deleteSelection,\n  joinListUp,\n  joinCollapsedListBackward,\n)\n\nconst dedentListCommand = createDedentListCommand()\nconst indentListCommand = createIndentListCommand()\n\nconst listKeymap = {\n  'Enter': enterCommand,\n  'Backspace': backspaceCommand,\n  'Delete': deleteCommand,\n  'Mod-]': indentListCommand,\n  'Mod-[': dedentListCommand,\n  'Tab': indentListCommand,\n  'Shift-Tab': dedentListCommand,\n}\n\n/**\n * Returns a extension that adds key bindings for list.\n *\n * @internal\n */\nexport function defineListKeymap(): PlainExtension {\n  return defineKeymap(listKeymap)\n}\n","import {\n  definePlugin,\n  type PlainExtension,\n} from '@prosekit/core'\nimport { Plugin } from '@prosekit/pm/state'\nimport {\n  createListEventPlugin,\n  createListRenderingPlugin,\n  createSafariInputMethodWorkaroundPlugin,\n  unwrapListSlice,\n} from 'prosemirror-flat-list'\n\nfunction createListClipboardPlugin(): Plugin {\n  return new Plugin({\n    props: {\n      transformCopied: unwrapListSlice,\n    },\n  })\n}\n\nfunction createListPlugins(): Plugin[] {\n  return [\n    createListEventPlugin(),\n    createListRenderingPlugin(),\n    createListClipboardPlugin(),\n    createSafariInputMethodWorkaroundPlugin(),\n  ]\n}\n\n/**\n * @internal\n */\nexport function defineListPlugins(): PlainExtension {\n  return definePlugin(createListPlugins)\n}\n","import { isElementLike } from '@ocavue/utils'\nimport {\n  defineClipboardSerializer,\n  type PlainExtension,\n} from '@prosekit/core'\nimport {\n  joinListElements,\n  listToDOM,\n} from 'prosemirror-flat-list'\n\n/**\n * @internal\n */\nexport function defineListSerializer(): PlainExtension {\n  return defineClipboardSerializer({\n    serializeFragmentWrapper: (fn) => {\n      return (...args) => {\n        const dom = fn(...args)\n        return joinListElements(dom)\n      }\n    },\n    serializeNodeWrapper: (fn) => {\n      return (...args) => {\n        const dom = fn(...args)\n        return isElementLike(dom) ? joinListElements(dom) : dom\n      }\n    },\n    nodesFromSchemaWrapper: (fn) => {\n      return (...args) => {\n        const nodes = fn(...args)\n        return {\n          ...nodes,\n          list: (node) => listToDOM({ node, nativeList: true, getMarkers: () => null }),\n        }\n      }\n    },\n  })\n}\n","import {\n  defineNodeSpec,\n  type Extension,\n} from '@prosekit/core'\nimport type {\n  DOMOutputSpec,\n  ProseMirrorNode,\n} from '@prosekit/pm/model'\nimport {\n  createListSpec,\n  listToDOM,\n  type ListAttributes,\n} from 'prosemirror-flat-list'\n\nimport type { ListAttrs } from './list-types'\n\n/**\n * @internal\n */\nexport type ListSpecExtension = Extension<{\n  Nodes: {\n    list: ListAttrs\n  }\n}>\n\nfunction getMarkers(node: ProseMirrorNode): DOMOutputSpec[] {\n  const attrs = node.attrs as ListAttributes\n  switch (attrs.kind) {\n    case 'task':\n      // Use a `label` element here so that the area around the checkbox is also checkable.\n      return [\n        [\n          'label',\n          [\n            'input',\n            { type: 'checkbox', checked: attrs.checked ? '' : undefined },\n          ],\n        ],\n      ]\n    default:\n      // Always return an empty array so that the marker element is rendered. This\n      // is required to make the drop indicator locate the correct position.\n      return []\n  }\n}\n\n/**\n * @internal\n */\nexport function defineListSpec(): ListSpecExtension {\n  const spec = createListSpec()\n\n  return defineNodeSpec<'list', ListAttrs>({\n    ...spec,\n    toDOM: (node) => {\n      return listToDOM({ node, getMarkers })\n    },\n    name: 'list',\n  })\n}\n","import {\n  union,\n  type Union,\n} from '@prosekit/core'\n\nimport {\n  defineListCommands,\n  type ListCommandsExtension,\n} from './list-commands'\nimport { defineListDropIndicator } from './list-drop-indicator'\nimport { defineListInputRules } from './list-input-rules'\nimport { defineListKeymap } from './list-keymap'\nimport { defineListPlugins } from './list-plugins'\nimport { defineListSerializer } from './list-serializer'\nimport {\n  defineListSpec,\n  type ListSpecExtension,\n} from './list-spec'\n\n/**\n * @internal\n */\nexport type ListExtension = Union<[ListSpecExtension, ListCommandsExtension]>\n\n/**\n * @public\n */\nexport function defineList(): ListExtension {\n  return union(\n    defineListSpec(),\n    defineListPlugins(),\n    defineListKeymap(),\n    defineListInputRules(),\n    defineListCommands(),\n    defineListSerializer(),\n    defineListDropIndicator(),\n  )\n}\n"],"mappings":";;;;;;;;;AAsBA,SAAS,WAAW,OAAiC;AACnD,QAAO,WAAW;EAAE,MAAM;EAAQ;EAAO,CAAC;;;;;;;AAyB5C,SAAgB,qBAA4C;AAC1D,QAAO,eAAe;EACpB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACD,CAAC;;;;;;;;;;;;;AC9CJ,SAAgB,0BAA0C;AACxD,QAAO,oBAAoB,EACzB,QACD,CAAC;;AAGJ,MAAMA,UAA4B,EAAE,MAAM,UAAmB;CAC3D,MAAM,QAAQ,KAAK,UAAU;AAC7B,KACE,SACG,MAAM,cAAc,KACpB,MAAM,YAAY,KAClB,MAAM,QAAQ,eAAe,GAGhC;MADa,MAAM,QAAQ,MAAM,EAAE,CAC1B,KAAK,SAAS,QAAQ;GAC7B,MAAM,OAAO,KAAK,MAAM,IAAI,QAAQ,IAAI;AACxC,OAAI,KAAK,OAAO,KAAK,SAAS,UAAU,KAAK,OAAO,KAAK,EACvD,QAAO;;;AAIb,QAAO;;;;;;;;ACxBT,SAAgB,uBAAkC;AAChD,QAAO,MAAM,eAAe,IAAI,gBAAgB,CAAC;;;;;ACQnD,MAAM,mBAAmB,cACvB,kBACA,iBACA,YACA,0BACD;AAED,MAAM,oBAAoB,yBAAyB;AACnD,MAAM,oBAAoB,yBAAyB;AAEnD,MAAM,aAAa;CACjB,SAAS;CACT,aAAa;CACb,UAAU;CACV,SAAS;CACT,SAAS;CACT,OAAO;CACP,aAAa;CACd;;;;;;AAOD,SAAgB,mBAAmC;AACjD,QAAO,aAAa,WAAW;;;;;AClCjC,SAAS,4BAAoC;AAC3C,QAAO,IAAI,OAAO,EAChB,OAAO,EACL,iBAAiB,iBAClB,EACF,CAAC;;AAGJ,SAAS,oBAA8B;AACrC,QAAO;EACL,uBAAuB;EACvB,2BAA2B;EAC3B,2BAA2B;EAC3B,yCAAyC;EAC1C;;;;;AAMH,SAAgB,oBAAoC;AAClD,QAAO,aAAa,kBAAkB;;;;;;;;ACpBxC,SAAgB,uBAAuC;AACrD,QAAO,0BAA0B;EAC/B,2BAA2B,OAAO;AAChC,WAAQ,GAAG,SAAS;IAClB,MAAM,MAAM,GAAG,GAAG,KAAK;AACvB,WAAO,iBAAiB,IAAI;;;EAGhC,uBAAuB,OAAO;AAC5B,WAAQ,GAAG,SAAS;IAClB,MAAM,MAAM,GAAG,GAAG,KAAK;AACvB,WAAO,cAAc,IAAI,GAAG,iBAAiB,IAAI,GAAG;;;EAGxD,yBAAyB,OAAO;AAC9B,WAAQ,GAAG,SAAS;AAElB,WAAO;KACL,GAFY,GAAG,GAAG,KAAK;KAGvB,OAAO,SAAS,UAAU;MAAE;MAAM,YAAY;MAAM,kBAAkB;MAAM,CAAC;KAC9E;;;EAGN,CAAC;;;;;ACXJ,SAAS,WAAW,MAAwC;CAC1D,MAAM,QAAQ,KAAK;AACnB,SAAQ,MAAM,MAAd;EACE,KAAK,OAEH,QAAO,CACL,CACE,SACA,CACE,SACA;GAAE,MAAM;GAAY,SAAS,MAAM,UAAU,KAAK;GAAW,CAC9D,CACF,CACF;EACH,QAGE,QAAO,EAAE;;;;;;AAOf,SAAgB,iBAAoC;CAClD,MAAM,OAAO,gBAAgB;AAE7B,QAAO,eAAkC;EACvC,GAAG;EACH,QAAQ,SAAS;AACf,UAAO,UAAU;IAAE;IAAM;IAAY,CAAC;;EAExC,MAAM;EACP,CAAC;;;;;;;;AC/BJ,SAAgB,aAA4B;AAC1C,QAAO,MACL,gBAAgB,EAChB,mBAAmB,EACnB,kBAAkB,EAClB,sBAAsB,EACtB,oBAAoB,EACpB,sBAAsB,EACtB,yBAAyB,CAC1B"}