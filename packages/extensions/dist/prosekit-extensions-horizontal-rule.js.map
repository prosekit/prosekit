{"version":3,"file":"prosekit-extensions-horizontal-rule.js","names":[],"sources":["../src/horizontal-rule/horizontal-rule-commands.ts","../src/horizontal-rule/horizontal-rule-input-rule.ts","../src/horizontal-rule/horizontal-rule-spec.ts","../src/horizontal-rule/horizontal-rule.ts"],"sourcesContent":["import {\n  defineCommands,\n  getNodeType,\n  type Extension,\n} from '@prosekit/core'\nimport {\n  Fragment,\n  Slice,\n} from '@prosekit/pm/model'\nimport type { Command } from '@prosekit/pm/state'\n\nexport type HorizontalRuleCommandsExtension = Extension<{\n  Commands: {\n    insertHorizontalRule: []\n  }\n}>\n\n/**\n * Returns a command that inserts a horizontal rule at the current selection.\n */\nexport function insertHorizontalRule(): Command {\n  return (state, dispatch) => {\n    if (!dispatch) return true\n\n    const { schema, tr } = state\n    const type = getNodeType(schema, 'horizontalRule')\n    const node = type.createChecked()\n    const pos = tr.selection.anchor\n    tr.replaceRange(pos, pos, new Slice(Fragment.from(node), 0, 0))\n    dispatch(tr)\n    return true\n  }\n}\n\nexport function defineHorizontalRuleCommands(): HorizontalRuleCommandsExtension {\n  return defineCommands({ insertHorizontalRule })\n}\n","import {\n  getNodeType,\n  union,\n  type PlainExtension,\n} from '@prosekit/core'\nimport { InputRule } from '@prosekit/pm/inputrules'\n\nimport { defineInputRule } from '../input-rule'\n\n/**\n * @public\n */\nexport function defineHorizontalRuleInputRule(): PlainExtension {\n  return union(\n    defineInputRule(\n      new InputRule(/^---$/, (state, match, start, end) => {\n        const { schema } = state\n        const { tr } = state\n        const type = getNodeType(schema, 'horizontalRule')\n        const node = type.createChecked()\n        tr.delete(start, end).insert(start - 1, node)\n        return tr.scrollIntoView()\n      }),\n    ),\n  )\n}\n","import {\n  defineNodeSpec,\n  type Extension,\n} from '@prosekit/core'\nimport type { Attrs } from '@prosekit/pm/model'\n\nexport type HorizontalRuleSpecExtension = Extension<{\n  Nodes: {\n    horizontalRule: Attrs\n  }\n}>\n\nexport function defineHorizontalRuleSpec(): HorizontalRuleSpecExtension {\n  return defineNodeSpec({\n    name: 'horizontalRule',\n    group: 'block',\n    parseDOM: [{ tag: 'hr' }],\n    // Wrap the `<hr>` in a `<div>` so that we can make it taller and easier to click.\n    toDOM: () => ['div', { class: 'prosekit-horizontal-rule' }, ['hr']],\n  })\n}\n","import {\n  union,\n  type Union,\n} from '@prosekit/core'\n\nimport {\n  defineHorizontalRuleCommands,\n  type HorizontalRuleCommandsExtension,\n} from './horizontal-rule-commands'\nimport { defineHorizontalRuleInputRule } from './horizontal-rule-input-rule'\nimport {\n  defineHorizontalRuleSpec,\n  type HorizontalRuleSpecExtension,\n} from './horizontal-rule-spec'\n\nexport type HorizontalRuleExtension = Union<\n  [HorizontalRuleSpecExtension, HorizontalRuleCommandsExtension]\n>\n\n/**\n * @public\n */\nexport function defineHorizontalRule(): HorizontalRuleExtension {\n  return union(\n    defineHorizontalRuleSpec(),\n    defineHorizontalRuleInputRule(),\n    defineHorizontalRuleCommands(),\n  )\n}\n"],"mappings":";;;;;;;;;AAoBA,SAAgB,uBAAgC;AAC9C,SAAQ,OAAO,aAAa;AAC1B,MAAI,CAAC,SAAU,QAAO;EAEtB,MAAM,EAAE,QAAQ,OAAO;EAEvB,MAAM,OADO,YAAY,QAAQ,iBAAiB,CAChC,eAAe;EACjC,MAAM,MAAM,GAAG,UAAU;AACzB,KAAG,aAAa,KAAK,KAAK,IAAI,MAAM,SAAS,KAAK,KAAK,EAAE,GAAG,EAAE,CAAC;AAC/D,WAAS,GAAG;AACZ,SAAO;;;AAIX,SAAgB,+BAAgE;AAC9E,QAAO,eAAe,EAAE,sBAAsB,CAAC;;;;;;;;ACvBjD,SAAgB,gCAAgD;AAC9D,QAAO,MACL,gBACE,IAAI,UAAU,UAAU,OAAO,OAAO,OAAO,QAAQ;EACnD,MAAM,EAAE,WAAW;EACnB,MAAM,EAAE,OAAO;EAEf,MAAM,OADO,YAAY,QAAQ,iBAAiB,CAChC,eAAe;AACjC,KAAG,OAAO,OAAO,IAAI,CAAC,OAAO,QAAQ,GAAG,KAAK;AAC7C,SAAO,GAAG,gBAAgB;GAC1B,CACH,CACF;;;;;ACZH,SAAgB,2BAAwD;AACtE,QAAO,eAAe;EACpB,MAAM;EACN,OAAO;EACP,UAAU,CAAC,EAAE,KAAK,MAAM,CAAC;EAEzB,aAAa;GAAC;GAAO,EAAE,OAAO,4BAA4B;GAAE,CAAC,KAAK;GAAC;EACpE,CAAC;;;;;;;;ACGJ,SAAgB,uBAAgD;AAC9D,QAAO,MACL,0BAA0B,EAC1B,+BAA+B,EAC/B,8BAA8B,CAC/B"}