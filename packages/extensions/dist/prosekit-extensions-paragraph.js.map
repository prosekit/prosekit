{"version":3,"file":"prosekit-extensions-paragraph.js","names":[],"sources":["../src/paragraph/paragraph-commands.ts","../src/paragraph/paragraph-keymap.ts","../src/paragraph/paragraph-spec.ts","../src/paragraph/paragraph.ts"],"sourcesContent":["import {\n  defineCommands,\n  setBlockType,\n  type Extension,\n} from '@prosekit/core'\nimport type { Command } from '@prosekit/pm/state'\n\n/**\n * @internal\n */\nexport type ParagraphCommandsExtension = Extension<{\n  Commands: {\n    setParagraph: []\n  }\n}>\n\n/**\n * @internal\n */\nexport function setParagraph(): Command {\n  return setBlockType({ type: 'paragraph' })\n}\n\n/**\n * @internal\n */\nexport function defineParagraphCommands(): ParagraphCommandsExtension {\n  return defineCommands({ setParagraph })\n}\n","import {\n  defineKeymap,\n  type PlainExtension,\n} from '@prosekit/core'\n\nimport { setParagraph } from './paragraph-commands'\n\n/**\n * @internal\n */\nexport function defineParagraphKeymap(): PlainExtension {\n  return defineKeymap({\n    'mod-alt-0': setParagraph(),\n  })\n}\n","import {\n  defineNodeSpec,\n  type Extension,\n} from '@prosekit/core'\nimport type { Attrs } from '@prosekit/pm/model'\n\n/**\n * @internal\n */\nexport type ParagraphSpecExtension = Extension<{\n  Nodes: {\n    paragraph: Attrs\n  }\n}>\n\n/**\n * @internal\n *\n * Defines a paragraph node spec.\n */\nexport function defineParagraphSpec(): ParagraphSpecExtension {\n  return defineNodeSpec({\n    name: 'paragraph',\n    content: 'inline*',\n    group: 'block',\n    parseDOM: [{ tag: 'p' }],\n    toDOM() {\n      return ['p', 0]\n    },\n  })\n}\n","import {\n  Priority,\n  union,\n  withPriority,\n  type Union,\n} from '@prosekit/core'\n\nimport {\n  defineParagraphCommands,\n  type ParagraphCommandsExtension,\n} from './paragraph-commands'\nimport { defineParagraphKeymap } from './paragraph-keymap'\nimport {\n  defineParagraphSpec,\n  type ParagraphSpecExtension,\n} from './paragraph-spec'\n\n/**\n * @internal\n */\nexport type ParagraphExtension = Union<[ParagraphSpecExtension, ParagraphCommandsExtension]>\n\n/**\n * @public\n *\n * Defines a paragraph node.\n *\n * The paragraph node spec has the highest priority, because it should be the\n * default block node for most cases.\n */\nexport function defineParagraph(): ParagraphExtension {\n  return union(\n    withPriority(defineParagraphSpec(), Priority.highest),\n    defineParagraphCommands(),\n    defineParagraphKeymap(),\n  )\n}\n"],"mappings":";;;;;;AAmBA,SAAgB,eAAwB;AACtC,QAAO,aAAa,EAAE,MAAM,aAAa,CAAC;;;;;AAM5C,SAAgB,0BAAsD;AACpE,QAAO,eAAe,EAAE,cAAc,CAAC;;;;;;;;ACjBzC,SAAgB,wBAAwC;AACtD,QAAO,aAAa,EAClB,aAAa,cAAc,EAC5B,CAAC;;;;;;;;;;ACOJ,SAAgB,sBAA8C;AAC5D,QAAO,eAAe;EACpB,MAAM;EACN,SAAS;EACT,OAAO;EACP,UAAU,CAAC,EAAE,KAAK,KAAK,CAAC;EACxB,QAAQ;AACN,UAAO,CAAC,KAAK,EAAE;;EAElB,CAAC;;;;;;;;;;;;;ACCJ,SAAgB,kBAAsC;AACpD,QAAO,MACL,aAAa,qBAAqB,EAAE,SAAS,QAAQ,EACrD,yBAAyB,EACzB,uBAAuB,CACxB"}