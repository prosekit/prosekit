{"version":3,"file":"shiki-highlighter-chunk.js","names":["highlighterPromise: Promise<void> | undefined","highlighter: Highlighter | undefined"],"sources":["../src/code-block/shiki-highlighter-chunk.ts"],"sourcesContent":["import type {\n  BundledHighlighterOptions,\n  BundledLanguage,\n  BundledTheme,\n  Highlighter,\n  SpecialLanguage,\n} from 'shiki'\nimport { createHighlighter } from 'shiki/bundle/full'\nimport { createJavaScriptRegexEngine } from 'shiki/engine/javascript'\n\nlet highlighterPromise: Promise<void> | undefined\nlet highlighter: Highlighter | undefined\nconst loadedLangs = new Set<BundledLanguage | SpecialLanguage>()\nconst loadedThemes = new Set<BundledTheme>()\n\nexport interface ShikiHighlighterOptions extends BundledHighlighterOptions<BundledLanguage, BundledTheme> {}\n\nexport interface HighlighterOptions extends Omit<ShikiHighlighterOptions, 'langs' | 'themes'> {\n  themes: BundledTheme[]\n  langs: (BundledLanguage | SpecialLanguage)[]\n}\n\nfunction ensureHighlighter({\n  ...options\n}: HighlighterOptions): Promise<void> {\n  if (!highlighterPromise) {\n    // If no engine is provided, use the JavaScript engine, which is\n    // smaller than the WASM engine.\n    if (!options.engine) {\n      const engine = createJavaScriptRegexEngine({ forgiving: true })\n      options.engine = engine\n    }\n    highlighterPromise = createHighlighter(options).then((createdHighlighter) => {\n      highlighter = createdHighlighter\n    })\n  }\n  return highlighterPromise\n}\n\nasync function loadLanguages(langs: (BundledLanguage | SpecialLanguage)[]) {\n  for (const lang of langs) {\n    if (!highlighter) break\n    await highlighter.loadLanguage(lang)\n    loadedLangs.add(lang)\n  }\n}\n\nasync function loadThemes(themes: BundledTheme[]) {\n  for (const theme of themes) {\n    if (!highlighter) break\n    await highlighter.loadTheme(theme)\n    loadedThemes.add(theme)\n  }\n}\n\nexport type HighlighterResult =\n  | {\n    highlighter: Highlighter\n    promise?: undefined\n  }\n  | {\n    highlighter?: undefined\n    promise: Promise<void>\n  }\n\nexport function createOrGetHighlighter(\n  options: HighlighterOptions,\n): HighlighterResult {\n  if (!highlighter) {\n    return { promise: ensureHighlighter(options) }\n  }\n\n  const langs = options.langs.filter((lang) => !loadedLangs.has(lang))\n  if (langs.length > 0) {\n    return { promise: loadLanguages(langs) }\n  }\n\n  const themes = options.themes.filter((theme) => !loadedThemes.has(theme))\n  if (themes.length > 0) {\n    return { promise: loadThemes(themes) }\n  }\n\n  return { highlighter }\n}\n"],"mappings":";;;;AAUA,IAAIA;AACJ,IAAIC;AACJ,MAAM,8BAAc,IAAI,KAAwC;AAChE,MAAM,+BAAe,IAAI,KAAmB;AAS5C,SAAS,kBAAkB,EACzB,GAAG,WACiC;AACpC,KAAI,CAAC,oBAAoB;AAGvB,MAAI,CAAC,QAAQ,OAEX,SAAQ,SADO,4BAA4B,EAAE,WAAW,MAAM,CAAC;AAGjE,uBAAqB,kBAAkB,QAAQ,CAAC,MAAM,uBAAuB;AAC3E,iBAAc;IACd;;AAEJ,QAAO;;AAGT,eAAe,cAAc,OAA8C;AACzE,MAAK,MAAM,QAAQ,OAAO;AACxB,MAAI,CAAC,YAAa;AAClB,QAAM,YAAY,aAAa,KAAK;AACpC,cAAY,IAAI,KAAK;;;AAIzB,eAAe,WAAW,QAAwB;AAChD,MAAK,MAAM,SAAS,QAAQ;AAC1B,MAAI,CAAC,YAAa;AAClB,QAAM,YAAY,UAAU,MAAM;AAClC,eAAa,IAAI,MAAM;;;AAc3B,SAAgB,uBACd,SACmB;AACnB,KAAI,CAAC,YACH,QAAO,EAAE,SAAS,kBAAkB,QAAQ,EAAE;CAGhD,MAAM,QAAQ,QAAQ,MAAM,QAAQ,SAAS,CAAC,YAAY,IAAI,KAAK,CAAC;AACpE,KAAI,MAAM,SAAS,EACjB,QAAO,EAAE,SAAS,cAAc,MAAM,EAAE;CAG1C,MAAM,SAAS,QAAQ,OAAO,QAAQ,UAAU,CAAC,aAAa,IAAI,MAAM,CAAC;AACzE,KAAI,OAAO,SAAS,EAClB,QAAO,EAAE,SAAS,WAAW,OAAO,EAAE;AAGxC,QAAO,EAAE,aAAa"}