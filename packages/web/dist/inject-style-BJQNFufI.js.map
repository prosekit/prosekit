{"version":3,"file":"inject-style-BJQNFufI.js","names":["styles: string[]","source","target","cssProps: string[]"],"sources":["../src/utils/clone-element.ts","../src/utils/inject-style.ts"],"sourcesContent":["import { getId } from '@ocavue/utils'\n\n/**\n * Creates a deep clone of an Element, including all computed styles so that\n * it looks almost exactly the same as the original element.\n */\nexport function deepCloneElement<T extends Element>(element: T, important = false): [T, string] {\n  const clonedElement = element.cloneNode(true) as T\n  const style = deepCopyStyles(element, clonedElement, important)\n  return [clonedElement, style]\n}\n\n/**\n * Creates a clone of an Element, including all computed styles so that\n * it looks similar enough to the original element.\n */\nexport function cloneElement<T extends Element>(element: T, important = false): [T, string] {\n  const clonedElement = element.cloneNode() as T\n  const style = copyStyles(element, clonedElement, important)\n  return [clonedElement, style]\n}\n\nfunction deepCopyStyles(source: Element, target: Element, important: boolean): string {\n  const sources = [source]\n  const targets = [target]\n  const styles: string[] = []\n\n  while (sources.length > 0 && sources.length === targets.length) {\n    const source = sources.pop()\n    const target = targets.pop()\n\n    if (!source || !target) {\n      break\n    }\n\n    const style = copyStyles(source, target, important)\n    if (style) {\n      styles.push(style)\n    }\n\n    sources.push(...source.children)\n    targets.push(...target.children)\n  }\n\n  return styles.join('\\n')\n}\n\nfunction copyStyles(source: Element, target: Element, important: boolean): string {\n  if (!source || !target) {\n    return ''\n  }\n\n  const view = source.ownerDocument?.defaultView\n  if (!view) {\n    return ''\n  }\n\n  // Known issue: pseudo styles are not copied.\n  const sourceStyle = view.getComputedStyle(source)\n  const targetStyle = (target as HTMLElement | SVGElement | MathMLElement).style\n\n  if (!sourceStyle || !targetStyle) {\n    return ''\n  }\n\n  for (const key of sourceStyle) {\n    targetStyle.setProperty(\n      key,\n      sourceStyle.getPropertyValue(key),\n      // Enforce important to avoid the style being overridden when the element\n      // is connected to the page.\n      // See https://github.com/prosekit/prosekit/issues/1185 for more details.\n      important ? 'important' : (sourceStyle.getPropertyPriority(key) || ''),\n    )\n  }\n\n  const styles: string[] = []\n  for (const pseudoSelector of [':before', ':after']) {\n    const sourcePseudoStyle = view.getComputedStyle(source, pseudoSelector)\n    const targetPseudoStyle = view.getComputedStyle(target, pseudoSelector)\n\n    if (!sourcePseudoStyle) {\n      continue\n    }\n\n    const content = sourcePseudoStyle.getPropertyValue('content')\n    const hasPseudoElement = content && content !== 'none' && content !== 'normal'\n\n    if (!hasPseudoElement) {\n      continue\n    }\n\n    const cssProps: string[] = []\n    for (const property of sourcePseudoStyle) {\n      const sourceValue = sourcePseudoStyle.getPropertyValue(property)\n      const sourcePriority = sourcePseudoStyle.getPropertyPriority(property)\n      const targetValue = targetPseudoStyle.getPropertyValue(property)\n      const targetPriority = targetPseudoStyle.getPropertyPriority(property)\n      if (sourceValue !== targetValue || sourcePriority !== targetPriority) {\n        cssProps.push(`${property}: ${sourceValue}${sourcePriority ? ' !important' : ''};`)\n      }\n    }\n\n    const uniqueClassName = `clone-pseudo-element-${getId()}`\n    target.classList.add(uniqueClassName)\n    styles.push(`.${uniqueClassName}${pseudoSelector} { ${cssProps.join(' ')} }`)\n  }\n\n  return styles.join('\\n')\n}\n","import { getDocument } from '@ocavue/utils'\n\nexport function injectStyle(container: HTMLElement, styleText: string): void {\n  if (!styleText) {\n    return\n  }\n  const document = getDocument(container)\n  const style = document.createElement('style')\n  style.textContent = styleText\n  container.appendChild(style)\n}\n"],"mappings":";;;;;;;AAMA,SAAgB,iBAAoC,SAAY,YAAY,OAAoB;CAC9F,MAAM,gBAAgB,QAAQ,UAAU,KAAK;CAC7C,MAAM,QAAQ,eAAe,SAAS,eAAe,UAAU;AAC/D,QAAO,CAAC,eAAe,MAAM;;;;;;AAO/B,SAAgB,aAAgC,SAAY,YAAY,OAAoB;CAC1F,MAAM,gBAAgB,QAAQ,WAAW;CACzC,MAAM,QAAQ,WAAW,SAAS,eAAe,UAAU;AAC3D,QAAO,CAAC,eAAe,MAAM;;AAG/B,SAAS,eAAe,QAAiB,QAAiB,WAA4B;CACpF,MAAM,UAAU,CAAC,OAAO;CACxB,MAAM,UAAU,CAAC,OAAO;CACxB,MAAMA,SAAmB,EAAE;AAE3B,QAAO,QAAQ,SAAS,KAAK,QAAQ,WAAW,QAAQ,QAAQ;EAC9D,MAAMC,WAAS,QAAQ,KAAK;EAC5B,MAAMC,WAAS,QAAQ,KAAK;AAE5B,MAAI,CAACD,YAAU,CAACC,SACd;EAGF,MAAM,QAAQ,WAAWD,UAAQC,UAAQ,UAAU;AACnD,MAAI,MACF,QAAO,KAAK,MAAM;AAGpB,UAAQ,KAAK,GAAGD,SAAO,SAAS;AAChC,UAAQ,KAAK,GAAGC,SAAO,SAAS;;AAGlC,QAAO,OAAO,KAAK,KAAK;;AAG1B,SAAS,WAAW,QAAiB,QAAiB,WAA4B;AAChF,KAAI,CAAC,UAAU,CAAC,OACd,QAAO;CAGT,MAAM,OAAO,OAAO,eAAe;AACnC,KAAI,CAAC,KACH,QAAO;CAIT,MAAM,cAAc,KAAK,iBAAiB,OAAO;CACjD,MAAM,cAAe,OAAoD;AAEzE,KAAI,CAAC,eAAe,CAAC,YACnB,QAAO;AAGT,MAAK,MAAM,OAAO,YAChB,aAAY,YACV,KACA,YAAY,iBAAiB,IAAI,EAIjC,YAAY,cAAe,YAAY,oBAAoB,IAAI,IAAI,GACpE;CAGH,MAAMF,SAAmB,EAAE;AAC3B,MAAK,MAAM,kBAAkB,CAAC,WAAW,SAAS,EAAE;EAClD,MAAM,oBAAoB,KAAK,iBAAiB,QAAQ,eAAe;EACvE,MAAM,oBAAoB,KAAK,iBAAiB,QAAQ,eAAe;AAEvE,MAAI,CAAC,kBACH;EAGF,MAAM,UAAU,kBAAkB,iBAAiB,UAAU;AAG7D,MAAI,EAFqB,WAAW,YAAY,UAAU,YAAY,UAGpE;EAGF,MAAMG,WAAqB,EAAE;AAC7B,OAAK,MAAM,YAAY,mBAAmB;GACxC,MAAM,cAAc,kBAAkB,iBAAiB,SAAS;GAChE,MAAM,iBAAiB,kBAAkB,oBAAoB,SAAS;GACtE,MAAM,cAAc,kBAAkB,iBAAiB,SAAS;GAChE,MAAM,iBAAiB,kBAAkB,oBAAoB,SAAS;AACtE,OAAI,gBAAgB,eAAe,mBAAmB,eACpD,UAAS,KAAK,GAAG,SAAS,IAAI,cAAc,iBAAiB,gBAAgB,GAAG,GAAG;;EAIvF,MAAM,kBAAkB,wBAAwB,OAAO;AACvD,SAAO,UAAU,IAAI,gBAAgB;AACrC,SAAO,KAAK,IAAI,kBAAkB,eAAe,KAAK,SAAS,KAAK,IAAI,CAAC,IAAI;;AAG/E,QAAO,OAAO,KAAK,KAAK;;;;;AC1G1B,SAAgB,YAAY,WAAwB,WAAyB;AAC3E,KAAI,CAAC,UACH;CAGF,MAAM,QADW,YAAY,UAAU,CAChB,cAAc,QAAQ;AAC7C,OAAM,cAAc;AACpB,WAAU,YAAY,MAAM"}