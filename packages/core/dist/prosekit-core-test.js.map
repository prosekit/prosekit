{"version":3,"file":"prosekit-core-test.js","names":["createNodeForTest: CreateNodeFunction","tags: Tags","normalizedChildren: TaggedProseMirrorNode[]","node: TaggedProseMirrorNode | null","applyMarkForTest: ApplyMarkFunction","newNode: TaggedProseMirrorNode"],"sources":["../src/test/test-builder.ts","../src/test/test-editor.ts"],"sourcesContent":["import type { ProseMirrorNode } from '@prosekit/pm/model'\n\nimport type {\n  ApplyMarkFunction,\n  CreateNodeFunction,\n} from '../editor/action'\nimport { assert } from '../utils/assert'\n\ntype Tags = Record<string, number>\nexport type TaggedProseMirrorNode = ProseMirrorNode & { tags?: Tags }\n\nexport const createNodeForTest: CreateNodeFunction = (\n  type,\n  attrs,\n  children: TaggedProseMirrorNode[],\n): TaggedProseMirrorNode => {\n  const tags: Tags = {}\n  const isTopNode = type === type.schema.topNodeType\n  let pos = isTopNode ? 0 : 1\n  const normalizedChildren: TaggedProseMirrorNode[] = []\n\n  for (const child of children) {\n    if (child.tags) {\n      for (const [key, value] of Object.entries(child.tags)) {\n        tags[key] = pos + value\n      }\n      normalizedChildren.push(child)\n      pos += child.nodeSize\n    } else if (child.isText) {\n      const text = child.text!\n      const re = /<(a|b)>/g\n      let i = 0\n      let out = ''\n      for (const match of text.matchAll(re)) {\n        out += text.slice(i, match.index)\n        tags[match[1]] = pos + out.length\n        i = match.index + match[0].length\n      }\n      out += text.slice(i)\n      if (out) {\n        normalizedChildren.push(child.type.schema.text(out).mark(child.marks))\n        pos += out.length\n      }\n    } else {\n      normalizedChildren.push(child)\n      pos += child.nodeSize\n    }\n  }\n\n  const node: TaggedProseMirrorNode | null = type.createAndFill(\n    attrs,\n    normalizedChildren,\n  )\n  assert(node, `Failed to create node ${type.name}`)\n  node.tags = tags\n  return node\n}\n\nexport const applyMarkForTest: ApplyMarkFunction = (\n  mark,\n  children: TaggedProseMirrorNode[],\n): TaggedProseMirrorNode[] => {\n  return children.map((node) => {\n    const newNode: TaggedProseMirrorNode = node.mark(mark.addToSet(node.marks))\n    newNode.tags = node.tags\n    return newNode\n  })\n}\n","import type { ProseMirrorNode } from '@prosekit/pm/model'\nimport {\n  NodeSelection,\n  TextSelection,\n  type Selection,\n} from '@prosekit/pm/state'\n\nimport {\n  createMarkActions,\n  createNodeActions,\n} from '../editor/action'\nimport {\n  Editor,\n  EditorInstance,\n  setupEditorExtension,\n  type EditorOptions,\n} from '../editor/editor'\nimport type { Extension } from '../types/extension'\nimport type {\n  NodeJSON,\n  SelectionJSON,\n} from '../types/model'\nimport { isProseMirrorNode } from '../utils/type-assertion'\n\nimport {\n  applyMarkForTest,\n  createNodeForTest,\n  type TaggedProseMirrorNode,\n} from './test-builder'\n\nfunction maybeResolve(doc: ProseMirrorNode, pos?: number) {\n  if (pos != null) {\n    return doc.resolve(pos)\n  }\n  return undefined\n}\n\nfunction getSelection(doc: TaggedProseMirrorNode): Selection {\n  const tags = doc.tags\n  const $a = maybeResolve(doc, tags?.a)\n  const $b = maybeResolve(doc, tags?.b)\n\n  if ($a) {\n    if ($a.parent.inlineContent) {\n      return new TextSelection($a, $b)\n    } else {\n      return new NodeSelection($a)\n    }\n  }\n  return TextSelection.atStart(doc)\n}\n\nclass TestEditorInstance extends EditorInstance {\n  constructor(extension: Extension) {\n    super(extension)\n    this.nodes = createNodeActions(this.schema, this.getState, createNodeForTest)\n    this.marks = createMarkActions(this.schema, this.getState, applyMarkForTest)\n  }\n\n  override setContent(\n    content: ProseMirrorNode | NodeJSON | string | HTMLElement,\n    selection?: SelectionJSON | Selection | 'start' | 'end',\n  ): void {\n    return super.setContent(\n      content,\n      isProseMirrorNode(content) && !selection\n        ? getSelection(content)\n        : selection,\n    )\n  }\n}\n\n/**\n * An editor for testing purposes.\n * @public\n */\nexport class TestEditor<E extends Extension = Extension> extends Editor<E> {\n  constructor(instance: EditorInstance) {\n    super(instance)\n  }\n\n  /**\n   * Set the editor state to the given document. You can use special tokens\n   * `<a>` and `<b>` to set the anchor and head positions of the selection.\n   *\n   * @example\n   *\n   * ```ts\n   * const editor = createTestEditor({ extension })\n   * const n = editor.nodes\n   * const doc = n.doc(n.paragraph('<a>Hello<b> world!'))\n   * editor.set(doc) // \"Hello\" is selected.\n   * ```\n   */\n  set(doc: ProseMirrorNode): void {\n    return this.setContent(doc)\n  }\n\n  dispatchEvent(event: Event): void {\n    this.view.dispatchEvent(event)\n  }\n}\n\n/**\n * @public\n */\nexport function createTestEditor<E extends Extension>(\n  options: EditorOptions<E>,\n): TestEditor<E> {\n  const extension = setupEditorExtension(options)\n  const instance = new TestEditorInstance(extension)\n  return new TestEditor(instance)\n}\n"],"mappings":";;;;AAWA,MAAaA,qBACX,MACA,OACA,aAC0B;CAC1B,MAAMC,OAAa,EAAE;CAErB,IAAI,MADc,SAAS,KAAK,OAAO,cACjB,IAAI;CAC1B,MAAMC,qBAA8C,EAAE;AAEtD,MAAK,MAAM,SAAS,SAClB,KAAI,MAAM,MAAM;AACd,OAAK,MAAM,CAAC,KAAK,UAAU,OAAO,QAAQ,MAAM,KAAK,CACnD,MAAK,OAAO,MAAM;AAEpB,qBAAmB,KAAK,MAAM;AAC9B,SAAO,MAAM;YACJ,MAAM,QAAQ;EACvB,MAAM,OAAO,MAAM;EACnB,MAAM,KAAK;EACX,IAAI,IAAI;EACR,IAAI,MAAM;AACV,OAAK,MAAM,SAAS,KAAK,SAAS,GAAG,EAAE;AACrC,UAAO,KAAK,MAAM,GAAG,MAAM,MAAM;AACjC,QAAK,MAAM,MAAM,MAAM,IAAI;AAC3B,OAAI,MAAM,QAAQ,MAAM,GAAG;;AAE7B,SAAO,KAAK,MAAM,EAAE;AACpB,MAAI,KAAK;AACP,sBAAmB,KAAK,MAAM,KAAK,OAAO,KAAK,IAAI,CAAC,KAAK,MAAM,MAAM,CAAC;AACtE,UAAO,IAAI;;QAER;AACL,qBAAmB,KAAK,MAAM;AAC9B,SAAO,MAAM;;CAIjB,MAAMC,OAAqC,KAAK,cAC9C,OACA,mBACD;AACD,QAAO,MAAM,yBAAyB,KAAK,OAAO;AAClD,MAAK,OAAO;AACZ,QAAO;;AAGT,MAAaC,oBACX,MACA,aAC4B;AAC5B,QAAO,SAAS,KAAK,SAAS;EAC5B,MAAMC,UAAiC,KAAK,KAAK,KAAK,SAAS,KAAK,MAAM,CAAC;AAC3E,UAAQ,OAAO,KAAK;AACpB,SAAO;GACP;;;;;ACpCJ,SAAS,aAAa,KAAsB,KAAc;AACxD,KAAI,OAAO,KACT,QAAO,IAAI,QAAQ,IAAI;;AAK3B,SAAS,aAAa,KAAuC;CAC3D,MAAM,OAAO,IAAI;CACjB,MAAM,KAAK,aAAa,KAAK,MAAM,EAAE;CACrC,MAAM,KAAK,aAAa,KAAK,MAAM,EAAE;AAErC,KAAI,GACF,KAAI,GAAG,OAAO,cACZ,QAAO,IAAI,cAAc,IAAI,GAAG;KAEhC,QAAO,IAAI,cAAc,GAAG;AAGhC,QAAO,cAAc,QAAQ,IAAI;;AAGnC,IAAM,qBAAN,cAAiC,eAAe;CAC9C,YAAY,WAAsB;AAChC,QAAM,UAAU;AAChB,OAAK,QAAQ,kBAAkB,KAAK,QAAQ,KAAK,UAAU,kBAAkB;AAC7E,OAAK,QAAQ,kBAAkB,KAAK,QAAQ,KAAK,UAAU,iBAAiB;;CAG9E,AAAS,WACP,SACA,WACM;AACN,SAAO,MAAM,WACX,SACA,kBAAkB,QAAQ,IAAI,CAAC,YAC3B,aAAa,QAAQ,GACrB,UACL;;;;;;;AAQL,IAAa,aAAb,cAAiE,OAAU;CACzE,YAAY,UAA0B;AACpC,QAAM,SAAS;;;;;;;;;;;;;;;CAgBjB,IAAI,KAA4B;AAC9B,SAAO,KAAK,WAAW,IAAI;;CAG7B,cAAc,OAAoB;AAChC,OAAK,KAAK,cAAc,MAAM;;;;;;AAOlC,SAAgB,iBACd,SACe;CACf,MAAM,YAAY,qBAAqB,QAAQ;CAC/C,MAAM,WAAW,IAAI,mBAAmB,UAAU;AAClD,QAAO,IAAI,WAAW,SAAS"}